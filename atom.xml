<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hexBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-18T00:38:07.978Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>RemyHe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react基础</title>
    <link href="http://example.com/2021/05/17/start-react/"/>
    <id>http://example.com/2021/05/17/start-react/</id>
    <published>2021-05-17T22:15:55.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-React"><a href="#什么是-React" class="headerlink" title="什么是 React?"></a>什么是 React?</h2><ul><li>React 是一个用于构建用户界面的 JavaScript 库 核心专注于视图,目的实现组件化开发</li></ul><h2 id="组件化概念"><a href="#组件化概念" class="headerlink" title="组件化概念"></a>组件化概念</h2><p>我们可以很直观的将一个复杂的页面分割成若干个独立组件,每个组件包含自己的逻辑和样式 再将这些独立组件组合完成一个复杂的页面。 这样既减少了逻辑复杂度，又实现了代码的重用</p><ul><li>可组合：一个组件可以和其他的组件一起使用或者可以直接嵌套在另一个组件内部</li><li>可重用：每个组件都是具有独立功能的，它可以被使用在多个场景中</li><li>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li></ul><h2 id="搭建-React-开发环境"><a href="#搭建-React-开发环境" class="headerlink" title="搭建 React 开发环境"></a>搭建 React 开发环境</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">cnpm</span> <span class="hljs-string">i</span> <span class="hljs-built_in">create-react-app</span> -<span class="hljs-string">g</span><br><span class="hljs-string">create</span>-<span class="hljs-string">react-app</span> <span class="hljs-string">reactapp</span><br><span class="hljs-string">npm</span> <span class="hljs-string">start</span><br></code></pre></td></tr></table></figure><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="什么是-JSX"><a href="#什么是-JSX" class="headerlink" title="什么是 JSX"></a>什么是 JSX</h3><p>是一种 JS 和 HTML 混合的语法,将组件的结构、数据甚至样式都聚合在一起定义组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">ReactDOM.render(<br>  &lt;h1&gt;Hello&lt;/h1&gt;,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="什么是元素"><a href="#什么是元素" class="headerlink" title="什么是元素"></a>什么是元素</h3><ul><li>JSX 其实只是一种语法糖,最终会通过 babeljs 转译成 createElement 语法</li><li>React 元素是构成 React 应用的最小单位</li><li>React 元素用来描述你在屏幕上看到的内容</li><li>React 元素事实上是普通的 JS 对象,ReactDOM 来确保浏览器中的 DOM 数据和 React 元素保持一致</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;h1 className=<span class="hljs-string">&quot;title&quot;</span> style=&#123;&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>&#125;&#125;&gt;hello&lt;/h1&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">React.createElement(<span class="hljs-string">&quot;h1&quot;</span>, &#123;<br>  className: <span class="hljs-string">&quot;title&quot;</span>,<br>  style: &#123;<br>    color: <span class="hljs-string">&#x27;red&#x27;</span><br>  &#125;<br>&#125;, <span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><p>createElement 的结果:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing">&#123;<br>  type:<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-comment">// 元素类型</span><br>  <span class="hljs-built_in">key</span>: <span class="hljs-keyword">null</span>, <span class="hljs-comment">// 区分同一个父亲，不同儿子</span><br>  ref: <span class="hljs-keyword">null</span>, <span class="hljs-comment">// 获取真实dom元素</span><br>  props:&#123;<br>    className: <span class="hljs-string">&quot;title&quot;</span>,<br>    children: <span class="hljs-string">&quot;hello&quot;</span>,<br>    style: &#123;<br>      <span class="hljs-built_in">color</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>    &#125;<br>  &#125;,<br>  children:<span class="hljs-string">&quot;hello&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JSX-表达式"><a href="#JSX-表达式" class="headerlink" title="JSX 表达式"></a>JSX 表达式</h3><p>可以任意地在 JSX 当中使用 JavaScript 表达式，在 JSX 当中的表达式要包含在大括号里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVAScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">let</span> title = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br>ReactDOM.render(<br>    &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;,<br>    root<br>);<br></code></pre></td></tr></table></figure><h3 id="JSX-属性"><a href="#JSX-属性" class="headerlink" title="JSX 属性"></a>JSX 属性</h3><ul><li>需要注意的是 JSX 并不是 HTML,更像 JavaScript</li><li>在 JSX 中属性不能包含关键字，像 class 需要写成 className,for 需要写成 htmlFor,并且属性名需要采用驼峰命名法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVAScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br>ReactDOM.render(<br>    &lt;h1 className=<span class="hljs-string">&quot;title&quot;</span> style=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125;&#125;&gt;Hello&lt;/h1&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="JSX-也是对象"><a href="#JSX-也是对象" class="headerlink" title="JSX 也是对象"></a>JSX 也是对象</h3><ul><li>可以在 if 或者 for 语句里使用 JSX</li><li>将它赋值给变量，当作参数传入，作为返回值都可以<br>if 中使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVAScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeting</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (name) &#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;name&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, Stranger.<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> element = greeting(<span class="hljs-string">&#x27;zhufeng&#x27;</span>);<br>ReactDOM.render(<br>    element,<br>    root<br>);<br></code></pre></td></tr></table></figure><p>for 中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVAScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br><span class="hljs-keyword">let</span> names = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>];<br><span class="hljs-keyword">let</span> elements = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; names.length; i++) &#123;<br>    elements.push(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;names[i]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>);<br>&#125;<br>ReactDOM.render(<br>    &lt;ul&gt;<br>        &#123;elements&#125;<br>    &lt;/ul&gt;,<br>    root<br>);<br></code></pre></td></tr></table></figure><h3 id="更新元素渲染"><a href="#更新元素渲染" class="headerlink" title="更新元素渲染"></a>更新元素渲染</h3><p>React 元素都是 immutable 不可变的。当元素被创建之后，你是无法改变其内容或属性的。一个元素就好像是动画里的一帧，它代表应用界面在某一时间点的样子<br>更新界面的唯一办法是创建一个新的元素，然后将它传入 ReactDOM.render()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVAScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tick</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> element = (<br>        &lt;div&gt;<br>            &#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleTimeString()&#125;<br>        &lt;/div&gt;<br>    );<br>    ReactDOM.render(element, root);<br>&#125;<br><span class="hljs-built_in">setInterval</span>(tick, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h3 id="React-只会更新必要的部分"><a href="#React-只会更新必要的部分" class="headerlink" title="React 只会更新必要的部分"></a>React 只会更新必要的部分</h3><ul><li>React DOM 首先会比较元素内容先后的不同，而在渲染过程中只会更新改变了的部分。</li><li>即便我们每秒都创建了一个描述整个 UI 树的新元素，React DOM 也只会更新渲染文本节点中发生变化的内容</li></ul><h2 id="组件-amp-Props"><a href="#组件-amp-Props" class="headerlink" title="组件 &amp; Props"></a>组件 &amp; Props</h2><ul><li>可以将 UI 切分成一些独立的、可复用的部件，这样你就只需专注于构建每一个单独的部件</li><li>组件从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素</li></ul><h3 id="函数-定义的-组件"><a href="#函数-定义的-组件" class="headerlink" title="函数(定义的)组件"></a>函数(定义的)组件</h3><p>函数组件接收一个单一的 props 对象并返回了一个 React 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Welcome</span>(<span class="hljs-params">props</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Welcome</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;we&quot;</span>/&gt;</span></span>, root);<br></code></pre></td></tr></table></figure><h3 id="类-定义的-组件"><a href="#类-定义的-组件" class="headerlink" title="类(定义的)组件"></a>类(定义的)组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Welcome</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;we&quot;</span>/&gt;</span></span>, root);<br></code></pre></td></tr></table></figure><h3 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h3><ul><li>React 元素不但可以是 DOM 标签，还可以是用户自定义的组件</li><li>当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）转换为单个对象传递给组件，这个对象被称之为 props</li><li>组件名称必须以大写字母开头</li><li>组件必须在使用的时候定义或引用它</li><li>组件的返回值只能有一个根元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Welcome</span>(<span class="hljs-params">props</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> element1= <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Welcome</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;we&quot;</span> /&gt;</span></span>;<br><span class="hljs-built_in">console</span>.log(element1.props.name);<br><span class="hljs-keyword">const</span> element2= <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Welcome2</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;we2&quot;</span> /&gt;</span></span>;<br><span class="hljs-built_in">console</span>.log(element1.props.name);<br><br>ReactDOM.render(<br>    &lt;div&gt;&#123;element1&#125;&#123;element2&#125;&lt;/div&gt;,<br>    root<br>);<br></code></pre></td></tr></table></figure><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul><li>组件的数据来源有两个地方，分别是属性对象和状态对象</li><li>属性是父组件传递过来的(默认属性，属性校验)</li><li>状态是自己内部的,改变状态唯一的方式就是 setState</li><li>属性和状态的变化都会影响视图更新</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br>interface Props &#123;<br><br>&#125;<br>interface State &#123;<br>    date: any<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">Props</span>, <span class="hljs-title">State</span>&gt;</span>&#123;<br>    timerID<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.timerID = <span class="hljs-built_in">setInterval</span>(<br>            () =&gt; <span class="hljs-built_in">this</span>.tick(),<br>            <span class="hljs-number">1000</span><br>        );<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timerID);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">tick</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            date: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;h1&gt;Hello, world!&lt;/h1&gt;<br>                &lt;h2&gt;It is &#123;<span class="hljs-built_in">this</span>.state.date.toLocaleTimeString()&#125;&lt;/h2&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br>ReactDOM.render(<br>    &lt;Clock /&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="不要直接修改-State"><a href="#不要直接修改-State" class="headerlink" title="不要直接修改 State"></a>不要直接修改 State</h3><ul><li>构造函数是唯一可以给 this.state 赋值的地方</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JAVAScript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br>interface Props &#123;<br>&#125;<br>interface State &#123;<br>    number: number<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">Props</span>, <span class="hljs-title">State</span>&gt; </span>&#123;<br>    timerID<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            number: <span class="hljs-number">0</span><br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.timerID = <span class="hljs-built_in">setInterval</span>(<br>            () =&gt; &#123;<br>                <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">number</span>: <span class="hljs-built_in">this</span>.state.number + <span class="hljs-number">1</span> &#125;);<br>                <span class="hljs-comment">//this.state.number = this.state.number + 1;</span><br>            &#125;,<br>            <span class="hljs-number">1000</span><br>        );<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timerID);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div &gt;<br>                &lt;p&gt; &#123;<span class="hljs-built_in">this</span>.state.number&#125; &lt;/p&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br>ReactDOM.render(&lt;<br>    Counter /&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="State-的更新可能是异步的"><a href="#State-的更新可能是异步的" class="headerlink" title="State 的更新可能是异步的"></a>State 的更新可能是异步的</h3><ul><li>出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用</li><li>因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态</li><li>可以让 setState() 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            number: <span class="hljs-number">0</span><br>        &#125;;<br>    &#125;<br>    handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//this.setState(&#123;number:this.state.number+1&#125;);</span><br>        <span class="hljs-comment">//console.log(this.state.number);</span><br>        <span class="hljs-comment">//this.setState(&#123;number:this.state.number+1&#125;);</span><br><br>        <span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (<br>            &#123; <span class="hljs-attr">number</span>: state.number + <span class="hljs-number">1</span> &#125;<br>        ));<br>        <span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (<br>            &#123; <span class="hljs-attr">number</span>: state.number + <span class="hljs-number">1</span> &#125;<br>        ));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div &gt;<br>                &lt;p&gt; &#123;<span class="hljs-built_in">this</span>.state.number&#125; &lt;/p&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.handleClick&#125;&gt;+&lt;/button&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br>ReactDOM.render(&lt;<br>    Counter /&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="State-的更新会被合并"><a href="#State-的更新会被合并" class="headerlink" title="State 的更新会被合并"></a>State 的更新会被合并</h3><ul><li>当你调用 setState() 的时候，React 会把你提供的对象合并到当前的 state</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            name: <span class="hljs-string">&#x27;zhufeng&#x27;</span>,<br>            number: <span class="hljs-number">0</span><br>        &#125;;<br>    &#125;<br>    handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//this.setState(&#123;number:this.state.number+1&#125;);</span><br>        <span class="hljs-comment">//console.log(this.state.number);</span><br>        <span class="hljs-comment">//this.setState(&#123;number:this.state.number+1&#125;);</span><br><br>        <span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (<br>            &#123; <span class="hljs-attr">number</span>: state.number + <span class="hljs-number">1</span> &#125;<br>        ));<br>        <span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (<br>            &#123; <span class="hljs-attr">number</span>: state.number + <span class="hljs-number">1</span> &#125;<br>        ));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div &gt;<br>                &lt;p&gt;&#123;<span class="hljs-built_in">this</span>.state.name&#125;: &#123;<span class="hljs-built_in">this</span>.state.number&#125; &lt;/p&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.handleClick&#125;&gt;+&lt;/button&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br>ReactDOM.render(&lt;<br>    Counter /&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li><li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串</li><li>你不能通过返回 false 的方式阻止默认行为。你必须显式的使用 preventDefault</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVASCRIPT"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Link</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params">e</span>)</span> &#123;<br>        e.preventDefault();<br>        alert(<span class="hljs-string">&#x27;The link was clicked.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;a href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> onClick=&#123;<span class="hljs-built_in">this</span>.handleClick&#125;&gt;<br>                Click me<br>          &lt;/a&gt;<br>        );<br>    &#125;<br>&#125;<br><br>ReactDOM.render(<br>    &lt;Link /&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVASCRIPT"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoggingButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is:&#x27;</span>, <span class="hljs-built_in">this</span>);<br>    &#125;<br>    handleClick1 = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is:&#x27;</span>, <span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">//onClick=&#123;this.handleClick.bind(this)</span><br>        <span class="hljs-keyword">return</span> (<br>            &lt;button onClick=&#123;<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-built_in">this</span>.handleClick(event)&#125;&gt;<br>                Click me<br>        &lt;/button&gt;<br>        );<br>    &#125;<br>&#125;<span class="hljs-built_in">this</span><br></code></pre></td></tr></table></figure><h3 id="向事件处理程序传递参数"><a href="#向事件处理程序传递参数" class="headerlink" title="向事件处理程序传递参数"></a>向事件处理程序传递参数</h3><ul><li>匿名函数</li><li>bind</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoggingButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  handleClick = <span class="hljs-function">(<span class="hljs-params">id, event</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;id:&#x27;</span>, id);<br>  &#125;;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;&gt;<br>        &lt;button onClick=&#123;<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-built_in">this</span>.handleClick(<span class="hljs-string">&#x27;1&#x27;</span>, event)&#125;&gt;<br>          Click me<br>        &lt;/button&gt;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.handleClick.bind(<span class="hljs-built_in">this</span>, <span class="hljs-string">&#x27;1&#x27;</span>)&#125;&gt;Click me&lt;/button&gt;<br>      &lt;/&gt;<br>    );<br>  &#125;<br>&#125;<br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LoggingButton</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素</li><li>在 React 渲染生命周期时，表单元素上的 value 将会覆盖 DOM 节点中的值，在非受控组件中，你经常希望 React 能赋予* 组件一个初始值，但是不去控制后续的更新。 在这种情况下, 你可以指定一个 defaultValue 属性，而不是 value</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-React&quot;&gt;&lt;a href=&quot;#什么是-React&quot; class=&quot;headerlink&quot; title=&quot;什么是 React?&quot;&gt;&lt;/a&gt;什么是 React?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;React 是一个用于构建用户界面的 JavaScript 库 核心</summary>
      
    
    
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之面对对象基础</title>
    <link href="http://example.com/2021/04/28/python-base-object/"/>
    <id>http://example.com/2021/04/28/python-base-object/</id>
    <published>2021-04-28T17:33:29.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<p>本文尝试探讨Python面向对象的基础概念</p><h2 id="从定义说起"><a href="#从定义说起" class="headerlink" title="从定义说起"></a>从定义说起</h2><h3 id="面向过程-Procedure-oriented"><a href="#面向过程-Procedure-oriented" class="headerlink" title="面向过程(Procedure-oriented)"></a>面向过程(Procedure-oriented)</h3><p>可以使用在函数中调用其他函数的方式设计我们的<br>程序。这叫做面向过程的编程方式。它的特点是把<br>程序分成多个步骤，用函数把这些步骤一步一步实<br>现，使用的时候串行依次调用。</p><p><img src="http://cdn.hexblog.cn/20190605-001.png"/></p><h3 id="面向对象编程-Object-Oriented-Programming-OOP"><a href="#面向对象编程-Object-Oriented-Programming-OOP" class="headerlink" title="面向对象编程(Object Oriented Programming - OOP)"></a>面向对象编程(Object Oriented Programming - OOP)</h3><p>面向对象编程是一种程序设计思想，OOP把对象作<br>为程序的基本单元，一个对象可能包含了数据、属<br>性和操作数据的方法。</p><blockquote><p>Python支持面对对象，也支持面向过程，在Python中一切皆对象。</p></blockquote><p><img src="http://cdn.hexblog.cn/20190605-002.png"/></p><h2 id="类-Class-与对象-Object"><a href="#类-Class-与对象-Object" class="headerlink" title="类(Class)与对象(Object)"></a>类(Class)与对象(Object)</h2><h3 id="类-Class"><a href="#类-Class" class="headerlink" title="类(Class)"></a>类(Class)</h3><p>是用来描述具有相同属性(Attribute)和方法(Method)对象的集合。是抽象的模版。</p><h3 id="对象或实例-Object"><a href="#对象或实例-Object" class="headerlink" title="对象或实例(Object)"></a>对象或实例(Object)</h3><p>是类(Class)的具体实例，即根据类创建过来一个个具体的“对象”。每个对象都拥有相同方法，但各自数据可能不尽相同。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>比如学生都有名字和分数，他们有着共同的属性。这时我们就可以设计一个学生类, 用于记录学生的名字和分数，并自定义方法打印出他们的名字和方法。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>继承（inheritance）。子类可以继承父类通用类型的属性和方<br>法。也就是在父类或者说基类里面实现一次就能被子类重用</li><li>封装(Encapsulation)。对外部隐藏有关对象工作原理的细节</li><li>多态（polymorphism）。也就是同一个方法，不同的行为，指<br>由继承而产生的相关但不同的类，其对象对同一消息会做出不同的<br>响应</li></ul><h2 id="属性-Attribute-和方法-Method"><a href="#属性-Attribute-和方法-Method" class="headerlink" title="属性(Attribute)和方法(Method)"></a>属性(Attribute)和方法(Method)</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>属性</li></ul><p>对象可以使用属于它的普通变<br>量来存储数据，这种从属于对象或类的变量就是属性，它用于描述所有对象共同特征。比如学生的名字和分数。</p><ul><li>方法</li></ul><p>类里面的函数，用来区别类外面的函数, 用来实现某些功能，实现对对象的操作。比如打印出学生的名字和分数。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>要创建一个类我们需要使用关键词class. 这个学生类Student看上去应该是这样的:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 创建一个学生类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br>    <br>    <span class="hljs-comment"># 定义学生属性，初始化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, name, score)</span></span><span class="hljs-symbol">:</span><br>        <span class="hljs-keyword">self</span>.name = name<br>        <span class="hljs-keyword">self</span>.score = score<br><br>    <span class="hljs-comment"># 定义打印学生信息的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_score</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span><br>        print(<span class="hljs-string">&quot;Name: &#123;&#125;. Score: &#123;&#125;&quot;</span>.format(<span class="hljs-keyword">self</span>.name, <span class="hljs-keyword">self</span>.score))<br>    <span class="hljs-comment"># 修改分数的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_score</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, score)</span></span><span class="hljs-symbol">:</span><br>        <span class="hljs-keyword">self</span>.score = score<br></code></pre></td></tr></table></figure><br>在这个案例中，我们只定义了一个抽象的类，程序并没有创建什么存储空间。只有当我们完成类的实例化(Instance)时，程序才会创建一个具体的对象（Object），并为之分配存储空间。所以这是就是上文说的对象（Object)是类（Class)的一个实例。</p><p>要创建一个具体的学生对象(Object)，我们还需要输入:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">student1</span> = Student(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">100</span>)<br><span class="hljs-attr">student2</span> = Student(<span class="hljs-string">&quot;Hex&quot;</span>, <span class="hljs-number">99</span>)<br></code></pre></td></tr></table></figure><p>在这个案例中，Student是类，student1和student2是我们创建的具体的学生对象。当我们输入上述代码时，Python会自动调用默认的<strong>init</strong>初始构造函数来生成具体的对象。关键字self是个非常重要的参数，代表创建的对象本身。</p><blockquote><p>特殊方法<strong>init</strong>，可以把我们认为必须绑定的属性传进来，将属性绑定到self，即创建的实例的身上，表示该实例拥有的特征。</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">&gt;&gt;&gt; student1.name<br><span class="hljs-keyword">John</span><br><span class="hljs-keyword">&gt;&gt;&gt; </span>student2.<span class="hljs-keyword">score</span><br><span class="hljs-keyword">99</span><br><span class="hljs-keyword">&gt;&gt; </span>student1.<span class="hljs-keyword">show_score()</span><br><span class="hljs-keyword">Name: </span><span class="hljs-keyword">John. </span><span class="hljs-keyword">Score: </span><span class="hljs-number">100</span><br>&gt;&gt; student2.update_score(<span class="hljs-number">88</span>)<br>&gt;&gt; student2.<span class="hljs-keyword">show_score()</span><br><span class="hljs-keyword">Name: </span>Hex. <span class="hljs-keyword">Score: </span><span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p>当你创建具体的对象后，你可以直接通过student1.name和student1.score来分别获取学生的名字和分数，也可以通过student1.show_score()来直接打印学生的名字和分数。当然我们重新通过方法更新了分数，也可先看到分数确实被我们修改了。这些方法我们看到和普通函数是一样的，定义的时候传入self，调用的时候，直接在实例上面调用，不用传递self，其他参数正常传入。</p><blockquote><p>我们从外部看，只有一个Student类，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，不用知道内部实现的细节。这样封装另一个好处就是，对上层调用保留接口即调用方法，具体的内部实现细节，在对象里面定义，软件架构的分层，隔离的概念就是类似思想。</p></blockquote><p><img src="http://cdn.hexblog.cn/20190605-004.jpg"/></p><h2 id="类变量-class-variables-与实例变量（instance-variables）"><a href="#类变量-class-variables-与实例变量（instance-variables）" class="headerlink" title="类变量(class variables)与实例变量（instance variables）"></a>类变量(class variables)与实例变量（instance variables）</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>假设我们需要在Student类里增加一个计数器number，每当一个新的学生对象(Object)被创建时，这个计数器就自动加1。由于这个计数器不属于某个具体学生，而属于Student类的，所以被称为类变量(class variables)。而姓名和分数属于每个学生对象的，所以属于实例变量(instance variables)，也被称为对象变量(object variables)。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>这个新Student类看上去应该是这样的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个学生类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br><br>    <span class="hljs-comment"># number属于类变量，不属于某个具体的学生实例</span><br>    number = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 定义学生属性，初始化方法</span><br>    <span class="hljs-comment"># name和score属于实例变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, score</span>):</span><br>        self.name = name<br>        self.score = score<br>        Student.number = Student.number + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 定义打印学生信息的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_score</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name: &#123;&#125;. Score: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, self.score))<br>        <br>    <span class="hljs-comment"># 修改分数的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_score</span>(<span class="hljs-params">self, score</span>):</span><br>        self.score = score<br><br><span class="hljs-comment"># 实例化，创建对象</span><br>student1 = Student(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">100</span>)<br>student2 = Student(<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-number">99</span>)<br><br><span class="hljs-built_in">print</span>(Student.number)  <span class="hljs-comment"># 打印2</span><br><span class="hljs-built_in">print</span>(student1.__class__.number) <span class="hljs-comment"># 打印2</span><br></code></pre></td></tr></table></figure><br>类变量和实例变量的区别很大，访问方式也不一样。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>类变量</li></ul><p>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。访问或调用类变量的正确方式是类名.变量名或者self.<strong>class</strong>.变量名。self.<strong>class</strong>自动返回每个对象的类名。</p><ul><li>实例变量<br>定义在方法中的变量，属于某个具体的对象。访问或调用实例变量的正确方式是对象名.变量名或者self.变量名。</li></ul><blockquote><p>实例变量即实例属性，为各个实例所有，互不干扰的；类变量即类属性，为类所有，所有实例可共享一个属性；若类变量与实例变量同名，尝试访问时，会先从实例变量里面找，没有再从类变量里面找（实例属性优先级比类属性高），所以结果可能有错误，这是要避免的</p></blockquote><h2 id="静态方法-static-method-和类方法-Class-method"><a href="#静态方法-static-method-和类方法-Class-method" class="headerlink" title="静态方法(static method)和类方法(Class method)"></a>静态方法(static method)和类方法(Class method)</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>正如同有些变量只属于类，有些方法也只属于类，不属于具体的对象。你有没有注意到属于对象的方法里面都有一个self参数, 比如<strong>init</strong>(self), show_score(self) self是指对象本身。属于类的方法不使用self参数， 而使用参数cls，代表类本身。另外对类方法我们会加上@classmethod的修饰符做说明。另外一种是静态方法，它既没有self，也没有cls，用@staticmethod的修饰符做表示，方法里面的逻辑与该对象完全无关。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>同样拿Student为例子，我们不用print函数打印出已创建学生对象的数量，而是自定义一个类方法来打印，同时也定义了静态方法，say_hello， 来打个招呼我们可以这么做:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br><br>    <span class="hljs-comment"># number属于类变量，不属于某个具体的学生实例</span><br>    number = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 定义学生属性，初始化方法</span><br>    <span class="hljs-comment"># name和score属于实例变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, score</span>):</span><br>        self.name = name<br>        self.score = score<br>        Student.number = Student.number + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 定义打印学生信息的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_score</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name: &#123;&#125;. Score: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.name, self.score))<br>        <br>    <span class="hljs-comment"># 修改分数的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_score</span>(<span class="hljs-params">self, score</span>):</span><br>        self.score = score<br><br>    <span class="hljs-comment"># 定义类方法，打印学生的数量</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">total</span>(<span class="hljs-params">cls</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total: &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cls.number))<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say_hello</span>():</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello!&#x27;</span>)<br><br><span class="hljs-comment"># 实例化，创建对象</span><br>student1 = Student(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">100</span>)<br>student2 = Student(<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-number">99</span>)<br>Student.show_score(student1)<br><span class="hljs-comment"># Name: John. Score: 100</span><br>Student.total()  <span class="hljs-comment"># 打印 Total: 2</span><br></code></pre></td></tr></table></figure><p>注意一下当我们使用类调用实例方法的方法时候，只有绑定实例才可以正常访问，正确调用。</p><h2 id="类的私有属性-private-attribute-和私有方法-private-method"><a href="#类的私有属性-private-attribute-和私有方法-private-method" class="headerlink" title="类的私有属性(private attribute)和私有方法(private method)"></a>类的私有属性(private attribute)和私有方法(private method)</h2><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>我们知道了，在类的内部，有属性和方法，外部的代码可以直接的调用实例变量来操作数据，这样隐藏内部的复杂逻辑。<br>但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的name、score属性：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> student1 = Student(<span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-number">60</span>)<br><span class="hljs-meta">&gt;&gt;</span> student1.score<br><span class="hljs-number">60</span><br><span class="hljs-meta">&gt;&gt;</span> student1.score = <span class="hljs-number">99</span><br>student1.score<br><span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><br>我们看到内部属性被外部访问，直接修改了。这是有些过度自由了，我只想该类通过自己的方法修改属性，也就是说设置为私有怎么办呢？</p><p>在Python里面，类里面的私有属性和私有方法以双下划线__开头。私有属性或方法不能在类的外部被使用或直接访问。只有在内部可以访问。</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p>我们同样看看学生类这个例子，把分数score变为私有属性，看看会发生什么。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 创建一个学生类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br><br>    <span class="hljs-comment"># 定义学生属性，初始化方法</span><br>    <span class="hljs-comment"># name和score属于实例变量, 其中__score属于私有变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, name, score)</span></span><span class="hljs-symbol">:</span><br>        <span class="hljs-keyword">self</span>.name = name<br>        <span class="hljs-keyword">self</span>.__score = score<br><br>     <span class="hljs-comment"># 定义打印学生信息的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_score</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span><br>        print(<span class="hljs-string">&quot;Name: &#123;&#125;. Score: &#123;&#125;&quot;</span>.format(<span class="hljs-keyword">self</span>.name, <span class="hljs-keyword">self</span>.__score))<br>        <br>    <span class="hljs-comment"># 修改分数的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_score</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, score)</span></span><span class="hljs-symbol">:</span><br>        <span class="hljs-keyword">self</span>.__score = score<br><br><span class="hljs-comment"># 实例化，创建对象</span><br>student1 = Student(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">100</span>)<br><br>student1.show_score()  <span class="hljs-comment"># 打印 Name: John, Score: 100</span><br>student1.__score  <span class="hljs-comment"># 打印出错，该属性不能从外部访问。</span><br></code></pre></td></tr></table></figure><br>如果你将score变成<strong>score, 你将不能直接通过student1.</strong>score获取该学生的分数。show_score()可以正常显示分数，是因为它是类里面的函数，可以访问私有变量。通过update_score()可以修改我们分数，<br>student1.score = 99也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> <span class="hljs-constructor">Student(<span class="hljs-params">object</span>)</span>:<br>    ...<br><br>    def update<span class="hljs-constructor">_score(<span class="hljs-params">self</span>, <span class="hljs-params">score</span>)</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= score &lt;= <span class="hljs-number">100</span>:<br>            self.__score = score<br>        <span class="hljs-keyword">else</span>:<br>            raise <span class="hljs-constructor">ValueError(&#x27;<span class="hljs-params">bad</span> <span class="hljs-params">score</span>&#x27;)</span><br></code></pre></td></tr></table></figure><br>这样通过访问限制保护，我们让代码更健壮了。</p><blockquote><p>双下划线的实例变量也不是真的不能从外部访问，因为解释器对把<strong>score变量改成_Student_score，所以仍然可以通过_Student</strong>name来访问__score变量：</p></blockquote><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">student1._Student__score</span><br>99<br></code></pre></td></tr></table></figure><blockquote><p>但是Python这么做实际上只是给你建了一个围栏，你要不要翻过去完全个人的自觉性。</p></blockquote><p>私有方法是同样的道理。show_score()变成，<strong>show_score()你将不能再通过student1.</strong>show_score()打印出学生的名字和分数。值得注意的是私有方法必需含有self这个参数，且把它作为第一个参数。</p><h2 id="property的用法"><a href="#property的用法" class="headerlink" title="@property的用法"></a>@property的用法</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>在上述案例中用户不能用student1.<strong>score方式访问学生分数，然而用户也就知道了</strong>score是个私有变量。根据上文的功能我分别调用了两个方法来实现，有限制的访问属性来访问学生分数，有没有一种简单方法我们让用户通过student1.score而继续保持__score私有变量的属性呢？这时我们就可以借助Python的@property装饰器了。我们知道装饰器就是动态非函数增加功能的。</p><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h2><p>我们可以先定义一个方法score(), 利用@property把这个函数伪装成属性。见下面例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个学生类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br><br>    <span class="hljs-comment"># 定义学生属性，初始化方法</span><br>    <span class="hljs-comment"># name和score属于实例变量, 其中score属于私有变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, score</span>):</span><br>        self.name = name<br>        self.__score = score<br><br>    <span class="hljs-comment"># 利用property装饰器把函数伪装成属性</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">score</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__score<br>        <br><span class="hljs-meta">    @property.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">score</span>(<span class="hljs-params">self, score</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(score, <span class="hljs-built_in">int</span>):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;score must be an integer!&#x27;</span>)<br>        <span class="hljs-keyword">if</span> score &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> score &gt; <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;score must between 0 ~ 100!&#x27;</span>)<br>        self._score = score<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_score</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__score<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_score</span>(<span class="hljs-params">self</span>):</span><br>          <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(score, <span class="hljs-built_in">int</span>):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;score must be an integer!&#x27;</span>)<br>        <span class="hljs-keyword">if</span> score &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> score &gt; <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;score must between 0 ~ 100!&#x27;</span>)<br>        self._score = score<br>        <br>    这是第二种方法<br>    <span class="hljs-comment"># score = property(get_score, set_score)</span><br>        <br><span class="hljs-comment"># 实例化，创建对象</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>student1 = Student(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">100</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>student1.score<br><span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>student1.score = <span class="hljs-number">60</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>student1.score<br><span class="hljs-number">60</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>student1.score = <span class="hljs-number">999</span><br>Traceback (most recent call last):<br>  ...<br>ValueError: score must between <span class="hljs-number">0</span> ~ <span class="hljs-number">100</span>!<br></code></pre></td></tr></table></figure><br>注意： 一旦给函数加上一个装饰器@property,调用函数的时候不用加括号就可以直接调用函数了。把一个getter方法变成属性，只需要加上@property，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作。</p><blockquote><p>@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p></blockquote><h2 id="类的继承-Inheritance"><a href="#类的继承-Inheritance" class="headerlink" title="类的继承(Inheritance)"></a>类的继承(Inheritance)</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>面向对象的编程带来的最大好处之一就是代码的重用，实现这种重用的方法之一是通过继承(Inheritance)。你可以先定义一个基类(Base class)或父类(Parent class)，再按通过class 子类名（父类名)来创建子类(Child class)。这样子类就可以从父类那里获得其已有的属性与方法，这种现象叫做类的继承。</p><p><img src="http://cdn.hexblog.cn/20190605-003.jpg"/></p><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><p>我们再看另一个例子，老师和学生同属学校成员，都有姓名和年龄的属性，然而老师有工资这个专有属性，学生有分数这个专有属性。这时我们就可以定义一个学校成员父类，2个子类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建父类学校成员SchoolMember</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolMember</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 打印个人信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:&quot;&#123;&#125;&quot; Age:&quot;&#123;&#125;&quot;&#x27;</span>.<span class="hljs-built_in">format</span>(self.name, self.age), end=<span class="hljs-string">&quot; &quot;</span>)<br><br><br><span class="hljs-comment"># 创建子类老师 Teacher</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params">SchoolMember</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, salary</span>):</span><br>        SchoolMember.__init__(self, name, age) <span class="hljs-comment"># 利用父类进行初始化</span><br>        self.salary = salary<br><br>    <span class="hljs-comment"># 方法重写(或覆盖)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span>(<span class="hljs-params">self</span>):</span><br>        SchoolMember.tell(self)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Salary: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.salary))<br><br><br><span class="hljs-comment"># 创建子类学生Student</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">SchoolMember</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, score</span>):</span><br>        SchoolMember.__init__(self, name, age)<br>        self.score = score<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span>(<span class="hljs-params">self</span>):</span><br>        SchoolMember.tell(self)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;score: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.score))<br><br><br>teacher1 = Teacher(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&quot;$60000&quot;</span>)<br>student1 = Student(<span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">99</span>)<br><br>teacher1.tell()  <span class="hljs-comment"># 打印 Name:&quot;John&quot; Age:&quot;44&quot; Salary: $60000</span><br>student1.tell()  <span class="hljs-comment"># Name:&quot;Mary&quot; Age:&quot;12&quot; score: 99</span><br><br></code></pre></td></tr></table></figure><br>上述代码中，你注意到以下几点了吗？</p><p>在创建子类的过程中，你需要手动调用父类的构造函数<strong>init</strong>来完成子类的构造。</p><p>在子类中调用父类的方法时，需要加上父类的类名前缀，且需要带上self参数变量。比如SchoolMember.tell(self), 这个可以通过使用super关键词简化代码。</p><p>如果子类调用了某个方法(如tell())或属性，Python会先在子类中找，如果找到了会直接调用。如果找不到才会去父类找。这为方法重写带来了便利。</p><p>实际Python编程过程中，一个子类可以继承多个父类，原理是一样的。第一步总是要手动调用<strong>init</strong>构造函数。</p><h3 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h3><p>super()关键字调用父类方法</p><p>在子类当中可以通过使用super关键字来直接调用父类的中相应的方法，简化代码。在下面例子中，学生子类调用了父类的tell()方法。super().tell()等同于SchoolMember.tell(self)。当你使用Python super()关键字调用父类方法时时，注意去掉括号里self这个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建子类学生Student</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">SchoolMember</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, score</span>):</span><br>        SchoolMember.__init__(self, name, age)<br>        self.score = score<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>().tell() <span class="hljs-comment"># 等同于 SchoolMember.tell(self)</span><br>        <span class="hljs-comment"># pyhotn2的需要显示的写明，super(Student, self).tell()</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;score: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.score))<br></code></pre></td></tr></table></figure><h2 id="方法解析顺序-Method-Resolution-Order-MRO"><a href="#方法解析顺序-Method-Resolution-Order-MRO" class="headerlink" title="方法解析顺序(Method Resolution Order- MRO)"></a>方法解析顺序(Method Resolution Order- MRO)</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>其方法（属性）可能定义在当前类，也可能来自于基类，所以在方法调用时就需要对当前类和基类进行搜索以确定方法所在的位置。其搜索顺序就是方法解析顺序。这里我们来一个测试验证一下。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">A</span>:</span><br><span class="hljs-class">    def run(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">        print(&#x27;<span class="hljs-type">A</span>.<span class="hljs-title">run&#x27;</span>)</span><br><span class="hljs-class">        </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">B</span>(<span class="hljs-type">A</span>):</span><br><span class="hljs-class">    pass</span><br><span class="hljs-class">    </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">C</span>(<span class="hljs-type">A</span>):</span><br><span class="hljs-class">    def run(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">        print(&#x27;<span class="hljs-type">C</span>.<span class="hljs-title">run&#x27;</span>)</span><br><span class="hljs-class">        </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">D</span>(<span class="hljs-type">B</span>, <span class="hljs-type">C</span>):</span><br><span class="hljs-class">    pass</span><br></code></pre></td></tr></table></figure><p>继承图示<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">   A<br>  /  <span class="hljs-string">\</span><br> /    <span class="hljs-string">\</span><br>B      C<br> <span class="hljs-string">\</span>    /<br>  <span class="hljs-string">\</span>  /<br>    D<br></code></pre></td></tr></table></figure></p><h3 id="经典类的顺序"><a href="#经典类的顺序" class="headerlink" title="经典类的顺序"></a>经典类的顺序</h3><p>Python 2中可用的形式，一种简单的MRO方法，从左到右的深度优先遍历。<br>对于菱形继承，调用不是我们希望的结果。我们知道C.run()是A.run()更具体的版本，但实际会调用A.run()。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&gt;&gt;&gt; import inspect<br>&gt;&gt;&gt; inspect.getmro(D)<br>(&lt;<span class="hljs-built_in">class</span> classic_mro.D <span class="hljs-keyword">at</span> <span class="hljs-number">0x1080b67a0</span>&gt;,<br>&lt;<span class="hljs-built_in">class</span> classic_mro.B <span class="hljs-keyword">at</span> <span class="hljs-number">0x1080b6668</span>&gt;,<br>&lt;<span class="hljs-built_in">class</span> classic_mro.A <span class="hljs-keyword">at</span> <span class="hljs-number">0x1080b6738</span>&gt;,<br>&lt;<span class="hljs-built_in">class</span> classic_mro.C <span class="hljs-keyword">at</span> <span class="hljs-number">0x1080b66d0</span>&gt;)<br>&gt;&gt;&gt; d = D()<br>&gt;&gt;&gt; d.<span class="hljs-built_in">run</span>()<br>A.<span class="hljs-built_in">run</span>()<br></code></pre></td></tr></table></figure><br>查找结果是[D, B, A, C]</p><h3 id="新式类顺序"><a href="#新式类顺序" class="headerlink" title="新式类顺序"></a>新式类顺序</h3><p>Python3中的新式类，都继承自ojbect,采用C3广度优先算法来做搜索MRO，多重继承更符合实际情况。如下例子:我们看到查找结果为[D, B, A, C]<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&gt;&gt;&gt; <span class="hljs-keyword">import</span> <span class="hljs-keyword">inspect</span><br>&gt;&gt;&gt; <span class="hljs-keyword">inspect</span>.getmro(D)<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.D&#x27;</span>&gt;, <br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.B&#x27;</span>&gt;, <br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.C&#x27;</span>&gt;, <br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.A&#x27;</span>&gt;, <br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br>&gt;&gt;&gt; d = D()<br>&gt;&gt;&gt; d.run()<br>C.run()<br></code></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017502538658208">https://www.liaoxuefeng.com/wiki/1016959663602400/1017502538658208</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文尝试探讨Python面向对象的基础概念&lt;/p&gt;
&lt;h2 id=&quot;从定义说起&quot;&gt;&lt;a href=&quot;#从定义说起&quot; class=&quot;headerlink&quot; title=&quot;从定义说起&quot;&gt;&lt;/a&gt;从定义说起&lt;/h2&gt;&lt;h3 id=&quot;面向过程-Procedure-oriented&quot;</summary>
      
    
    
    
    <category term="python系列" scheme="http://example.com/categories/python%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之装饰器</title>
    <link href="http://example.com/2021/04/28/python-decorator/"/>
    <id>http://example.com/2021/04/28/python-decorator/</id>
    <published>2021-04-28T17:31:15.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Python的装饰器(decorator)可以说是Python的一个神器，它可以在不改变一个函数代码和调用方式的情况下给函数添加新的功能。Python的装饰器同时也是Python学习从入门到精通过程中必需要熟练掌握的知识。小编我当初学习Python时差点被装饰器搞晕掉，今天尝试用浅显的语言解释下Python装饰器的工作原理及如何编写自己的装饰器吧。</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>Python装饰器的本质</p><p>Python的装饰器本质上是一个嵌套函数，它接受被装饰的函数(func)作为参数，并返回一个包装过的函数。这样我们可以在不改变被装饰函数的代码的情况下给被装饰函数或程序添加新的功能。Python的装饰器广泛应用于缓存、权限校验(如django中的@login_required和@permission_required装饰器)、性能测试(比如统计一段程序的运行时间)和插入日志等应用场景。有了装饰器，我们就可以抽离出大量与函数功能本身无关的代码，增加一个函数的重用性。</p><p>试想你写了很多程序，一直运行也没啥问题。有一天老板突然让你统计每个程序都运行了多长时间并比较下运行效率。此时如果你去手动修改每个程序的代码一定会让你抓狂，而且还破坏了那些程序的重用性。聪明的程序员是绝不能干这种蠢事的。此时你可以编写一个@time_it的装饰器(代码如下所示)。如果你想打印出某个函数或程序运行时间，只需在函数前面@一下，是不是很帅?<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> <span class="hljs-type">time</span><br><br>def time_it(func):<br>    def <span class="hljs-keyword">inner</span>():<br>        start = <span class="hljs-type">time</span>.time()<br>        func()<br>        end = <span class="hljs-type">time</span>.time()<br>        print(<span class="hljs-string">&#x27;用时:&#123;&#125;秒&#x27;</span>.format(<span class="hljs-keyword">end</span>-<span class="hljs-keyword">start</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">inner</span><br><br>@time_it<br>def func1():<br>    <span class="hljs-type">time</span>.sleep(<span class="hljs-number">2</span>)<br>    print(&quot;Func1 is running.&quot;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    func1()<br></code></pre></td></tr></table></figure><br>运行结果如下:</p><p>Func1 is running.</p><p>用时:2.0056326389312744</p><p>由于Python装饰器的工作原理主要依赖于嵌套函数和闭包，所以我们必须先对嵌套函数和闭包有深入的了解。嵌套函数和闭包几乎是Python工作面试必考题哦。</p><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>如果在一个函数的内部还定义了另一个函数(注意: 是定义，不是引用!），这个函数就叫嵌套函数。外部的我们叫它外函数，内部的我们叫他内函数。</p><p>我们先来看一个最简单的嵌套函数的例子。我们在outer函数里又定义了一个inner函数，并调用了它。你注意到了吗? 内函数在自己作用域内查找局部变量失败后，会进一步向上一层作用域里查找。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>    x = <span class="hljs-number">1</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>        y = x + <span class="hljs-number">1</span><br>        print(y)<br>    inner()<br><br>outer() <span class="hljs-comment">#输出结果 2</span><br></code></pre></td></tr></table></figure><br>如果我们在外函数里不直接调用内函数，而是通过return inner返回一个内函数的引用 这时会发生什么呢? 你将会得到一个内函数对象，而不是运行结果。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">def <span class="hljs-keyword">outer</span>():<br>    x = <span class="hljs-number">1</span><br>    def <span class="hljs-keyword">inner</span>():<br>        y = x + <span class="hljs-number">1</span><br>        print(y)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">inner</span><br><br><span class="hljs-keyword">outer</span>() # 输出&lt;<span class="hljs-keyword">function</span> <span class="hljs-keyword">outer</span>.&lt;locals&gt;.<span class="hljs-keyword">inner</span> at <span class="hljs-number">0x039248E8</span>&gt;<br>f1 = <span class="hljs-keyword">outer</span>()<br>f1() # 输出<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><br>上述这个案例比较简单，因为outer和inner函数都是没有参数的。我们现在对上述代码做点改动，加入参数。你可以看到外函数的参数或变量可以很容易传递到内函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span>(<span class="hljs-params">x</span>):</span><br>    a = x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">y</span>):</span><br>        b = y<br>        <span class="hljs-built_in">print</span>(a+b)<br><br>    <span class="hljs-keyword">return</span> inner<br><br>f1 = outer(<span class="hljs-number">1</span>) <span class="hljs-comment"># 返回inner函数对象</span><br>f1(<span class="hljs-number">10</span>) <span class="hljs-comment"># 相当于inner(10)。输出11</span><br></code></pre></td></tr></table></figure></p><p>如果上例中外函数的变量x换成被装饰函数对象(func)，内函数的变量y换成被装饰函数的参数，我们就可以得到一个通用的装饰器啦(如下所示)。你注意到了吗? 我们在没对func本身做任何修改的情况下，添加了其它功能, 从而实现了对函数的装饰。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">def decorator(<span class="hljs-keyword">func</span>):<br>    def inner(<span class="hljs-operator">*</span>args, <span class="hljs-operator">**</span>kwargs):<br>        add_other_actions()<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span>(<span class="hljs-operator">*</span>args, <span class="hljs-operator">**</span>kwargs)</span><br>    <span class="hljs-keyword">return</span> inner<br></code></pre></td></tr></table></figure><br>仔细再读读上面这段代码，我们的decorator返回的仅仅是inner函数吗? 答案是不。它返回的其实是个闭包(Closure)。整个装饰器的工作都依赖于Python的闭包原理。</p><h2 id="闭包-Closure"><a href="#闭包-Closure" class="headerlink" title="闭包(Closure)"></a>闭包(Closure)</h2><p>闭包是Python编程一个非常重要的概念。如果一个外函数中定义了一个内函数，且内函数体内引用到了体外的变量，这时外函数通过return返回内函数的引用时，会把定义时涉及到的外部引用变量和内函数打包成一个整体（闭包）返回。我们在看下之间案例。我们的outer方法返回的只是内函数对象吗? 错。我们的outer函数返回的实际上是一个由inner函数和外部引用变量(a)组成的闭包!<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span>(<span class="hljs-params">x</span>):</span><br>    a = x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">y</span>):</span><br>        b = y<br>        <span class="hljs-built_in">print</span>(a+b)<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br>f1 = outer(<span class="hljs-number">1</span>) <span class="hljs-comment"># 返回inner函数对象+局部变量1(闭包)</span><br>f1(<span class="hljs-number">10</span>) <span class="hljs-comment"># 相当于inner(10)。输出11</span><br></code></pre></td></tr></table></figure><br>一般一个函数运行结束的时候，临时变量会被销毁。但是闭包是一个特别的情况。当外函数发现，自己的临时变量会在将来的内函数中用到，自己在结束的时候，返回内函数的同时，会把外函数的临时变量同内函数绑定在一起。这样即使外函数已经结束了，内函数仍然能够使用外函数的临时变量。这就是闭包的强大之处。</p><p>如何编写一个通用的装饰器</p><p>我们现在可以开始动手写个名为hint的装饰器了，其作用是在某个函数运行前给我们提示。这里外函数以hint命名，内函数以常用的wrapper(包裹函数)命名。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">def hint(func):<br>    def <span class="hljs-keyword">wrapper</span>(*args, **kwargs):<br>        print(<span class="hljs-string">&#x27;&#123;&#125; is running&#x27;</span>.format(func.__name__))<br>        <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">wrapper</span><br><br>@hint<br>def hello():<br>    print(&quot;Hello!&quot;)<br></code></pre></td></tr></table></figure><br>我们现在对hello已经进行了装饰，当我们调用hello()时，我们可以看到如下结果。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&gt;&gt;&gt; hello()<br>hello <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span>.<br>Hello!<br></code></pre></td></tr></table></figure><br>值得一提的是被装饰器装饰过的函数看上去名字没变，其实已经变了。当你运行hello()后，你会发现它的名字已经悄悄变成了wrapper，这显然不是我们想要的(如下图所示)。这一点也不奇怪，因为外函数返回的是由wrapper函数和其外部引用变量组成的闭包。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>hello.__name__<br><span class="hljs-string">&#x27;wrapper&#x27;</span><br></code></pre></td></tr></table></figure><br>为了解决这个问题保证装饰过的函数<strong>name</strong>属性不变，我们可以使用functools模块里的wraps方法，先对func变量进行wraps。下面这段代码可以作为编写一个通用装饰器的示范代码，注意收藏哦。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br>def hint(func):<br>    @wraps(func)<br>    def <span class="hljs-keyword">wrapper</span>(*args, **kwargs):<br>        print(<span class="hljs-string">&#x27;&#123;&#125; is running&#x27;</span>.format(func.__name__))<br>        <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">wrapper</span><br><br><br>@hint<br>def hello():<br>    print(&quot;Hello!&quot;)<br></code></pre></td></tr></table></figure><p>恭喜你，你已经学会写一个比较通用的装饰器啦，并保证装饰过的函数<strong>name</strong>属性不变啦。当然使用嵌套函数也有缺点，比如不直观。这时你可以借助Python的decorator模块(需事先安装)可以简化装饰器的编写和使用。如下所示。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">from decorator <span class="hljs-keyword">import</span> decorator<br><br><span class="hljs-meta">@decorator</span><br>def hint(<span class="hljs-keyword">func</span>, <span class="hljs-operator">*</span>args, <span class="hljs-operator">**</span>kwargs):<br>    <span class="hljs-built_in">print</span>(&#x27;&#123;&#125; <span class="hljs-keyword">is</span> running&#x27;.format(<span class="hljs-keyword">func</span>.__name__))<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span>(<span class="hljs-operator">*</span>args, <span class="hljs-operator">**</span>kwargs)</span><br></code></pre></td></tr></table></figure><br>编写带参数的高级装饰器</p><p>前面几个装饰器一般是内外两层嵌套函数。如果我们需要编写的装饰器本身是带参数的，我们需要编写三层的嵌套函数，其中最外一层用来传递装饰器的参数。现在我们要对@hint装饰器做点改进，使其能通过@hint(coder=”John”)传递参数。该装饰器在函数运行前给出提示的时候还显示函数编写人员的名字。完整代码如下所示:<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><br>def hint(coder):<br>    def <span class="hljs-keyword">wrapper</span>(func):<br>        @wraps(func)<br>        def inner_wrapper(*args, **kwargs):<br>            print(<span class="hljs-string">&#x27;&#123;&#125; is running&#x27;</span>.format(func.__name__))<br>            print(<span class="hljs-string">&#x27;Coder: &#123;&#125;&#x27;</span>.format(coder))<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> inner_wrapper<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">wrapper</span><br><br><br>@hint(coder=&quot;John&quot;)<br>def hello():<br>    print(&quot;Hello!&quot;)<br></code></pre></td></tr></table></figure><br>下面这段代码是一段经典的Python装饰器代码，显示了@cache这个装饰器怎么编写和工作的。它需要使用缓存实例做为一个参数，所以也是三层嵌套函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><br><span class="hljs-comment"># 装饰器增加缓存功能</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cache</span>(<span class="hljs-params">instance</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">func</span>):</span><br><span class="hljs-meta">        @wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner_wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>            <span class="hljs-comment"># 构建key: key =&gt; func_name::args::kwargs</span><br>            joint_args = <span class="hljs-string">&#x27;,&#x27;</span>.join((<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args))<br>            joint_kwargs = <span class="hljs-string">&#x27;,&#x27;</span>.join(<span class="hljs-string">&#x27;&#123;&#125;=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(k, v) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(kwargs.items()))<br>            key = <span class="hljs-string">&#x27;&#123;&#125;::&#123;&#125;::&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(func.__name__,joint_args, joint_kwargs)<br>            <span class="hljs-comment"># 根据key获取结果。如果key已存在直接返回结果，不用重复计算。</span><br>         result = instance.get(key)<br>            <span class="hljs-keyword">if</span> result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-comment"># 如果结果不存在，重新计算，缓存。</span><br>         result = func(*args, **kwargs)<br>            instance.<span class="hljs-built_in">set</span>(key, result)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">return</span> inner_wrapper<br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-comment"># 创建字典构造函数，用户缓存K/V键值对</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DictCache</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.cache = <span class="hljs-built_in">dict</span>()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">return</span> self.cache.get(key)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set</span>(<span class="hljs-params">self, key, value</span>):</span><br>        self.cache[key] = value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(self.cache)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">repr</span>(self.cache)<br><br><br><span class="hljs-comment"># 创建缓存对象</span><br>cache_instance = DictCache()<br><br><br><span class="hljs-comment"># Python语法糖调用装饰器</span><br><span class="hljs-meta">@cache(<span class="hljs-params">cache_instance</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">long_time_func</span>(<span class="hljs-params">x</span>):</span><br>    time.sleep(x)<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment"># 调用装饰过函数</span><br>long_time_func(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><br>基于类实现的装饰器<br>Python的装饰器不仅可以用嵌套函数来编写，还可以使用类来编写。其调用<strong>init</strong>方法创建实例，传递参数，并调用<strong>call</strong>方法实现对被装饰函数功能的添加。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><br><span class="hljs-comment">#类的装饰器写法， 不带参数</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hint</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, func</span>):</span><br>        self.func = func<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; is running&#x27;</span>.<span class="hljs-built_in">format</span>(self.func.__name__))<br>        <span class="hljs-keyword">return</span> self.func(*args, **kwargs)<br><br><br><span class="hljs-comment">#类的装饰器写法， 带参数</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hint</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, coder=<span class="hljs-literal">None</span></span>):</span><br>        self.coder = coder<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, func</span>):</span><br><span class="hljs-meta">        @wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; is running&#x27;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Coder: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.coder))<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)     <span class="hljs-comment"># 正式调用主要处理函数</span><br>        <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文总结了什么是Python的装饰器及其工作原理，并重点介绍了嵌套函数和闭包原理。最后详细展示了如何编写一个通用装饰器及带参数的高级装饰器, 包括使用类来编写装饰器。大家要熟练掌握哦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Python的装饰器(decorator)可以说是Python的一个神器，它可以在不改变一个函数代码和调用方式的情况下给函数添加新的功能。P</summary>
      
    
    
    
    <category term="python系列" scheme="http://example.com/categories/python%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的this、call、apply、bind的理解与应用</title>
    <link href="http://example.com/2021/04/28/js-this-call-apply/"/>
    <id>http://example.com/2021/04/28/js-this-call-apply/</id>
    <published>2021-04-28T17:30:41.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在js函数内部有一个特殊的对象就是this,行为和Java中的this大致类似。this引用的是函数据以执行的环境对象-或者也可以说是this的值(当在网页的全局作用域中调用函数时,this对象引用的就是window).<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">window<span class="hljs-selector-class">.color</span> = <span class="hljs-string">&#x27;red&#x27;</span><br><span class="hljs-selector-tag">var</span> o = &#123;<span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span>&#125;<br>function sayColor() &#123;<br>    alert(this.<span class="hljs-attribute">color</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">sayColor</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// red</span><br>o<span class="hljs-selector-class">.sayColor</span> = sayColor<br>o<span class="hljs-selector-class">.sayColor</span>() <span class="hljs-comment">// bule</span><br></code></pre></td></tr></table></figure><br>我们可以清晰的看到sayColor()是在全局作用域中定义的，它引用this对象。由于在调用函数之前，this的值不确定，因此this可能会在代码中执行过程中引用不同的对象。</p><ul><li>函数名称仅仅只是一个指针变量,即是在不同环境中调用，仍然是同一个函数。</li></ul><p>看一个例子增加理解，this永远指向最后调用它的那对象</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> <span class="hljs-built_in">color</span> = <span class="hljs-string">&quot;red&quot;</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> <span class="hljs-built_in">color</span> = <span class="hljs-string">&#x27;blue&#x27;</span><br>      innerFunction();<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">innerFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.color);      <span class="hljs-comment">// red</span><br>      &#125;<br>  &#125;<br><br>  fn()<br></code></pre></td></tr></table></figure><h2 id="改变this的指向"><a href="#改变this的指向" class="headerlink" title="改变this的指向"></a>改变this的指向</h2><p>根据前文我们知道this 的指向并不是在创建的时候就可以确定的，那么如何来改变或者绑定this的指向呢?<br>答案有四:</p><ul><li>在函数内部使用 _this = this</li><li>使用ES6箭头函数</li><li>new实例一个对象</li><li>使用apply，call，bind</li></ul><p>来个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;red&quot;</span><br>    <span class="hljs-keyword">var</span> a = &#123;<br>        color: <span class="hljs-string">&quot;blue&quot;</span>,<br>        func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.color)     <br>        &#125;,<br>        func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">this</span>.func1()<br>            &#125;, <span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;;<br>    a.func2()     <span class="hljs-comment">// this.func1 is not a function</span><br></code></pre></td></tr></table></figure><p>这个例子这种情况是会报错的,setTimeout作为匿名函数,this是永远指向window,在 window 中并没有 func1 函数。</p><h3 id="在函数内部使用-this-this"><a href="#在函数内部使用-this-this" class="headerlink" title="在函数内部使用 _this = this"></a>在函数内部使用 _this = this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;red&quot;</span><br>    <span class="hljs-keyword">var</span> a = &#123;<br>        color: <span class="hljs-string">&quot;blue&quot;</span>,<br>        func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.color)     <br>        &#125;,<br>        func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                _this.func1()<br>            &#125;, <span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;;<br>    a.func2()     <span class="hljs-comment">// blue</span><br></code></pre></td></tr></table></figure><p>首先设置 var _this = this，这里的 this 是调用 func2 的对象 a，为了防止在 func2 中的 setTimeout 被 window 调用而导致的在 setTimeout 中的 this 为 window。我们将 this(指向变量 a) 赋值给一个变量 _this，这样，在 func2 中我们使用 _this 就是指向对象 a 了。</p><h3 id="使用ES6箭头函数"><a href="#使用ES6箭头函数" class="headerlink" title="使用ES6箭头函数"></a>使用ES6箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;red&quot;</span><br>    <span class="hljs-keyword">var</span> a = &#123;<br>        color: <span class="hljs-string">&quot;blue&quot;</span>,<br>        func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.color)     <br>        &#125;,<br>        func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">this</span>.func1()<br>            &#125;, <span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;;<br>    a.func2()     <span class="hljs-comment">// blue</span><br></code></pre></td></tr></table></figure><p>键头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</p><h3 id="new一个对象"><a href="#new一个对象" class="headerlink" title="new一个对象"></a>new一个对象</h3><p>如果函数调用前使用了 new 关键字, 则是调用了构造函数。<br>这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象.我们换一个例子<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fruits</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br> <br>fruits.prototype = &#123;<br>    color: <span class="hljs-string">&quot;red&quot;</span>,<br>    say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;My color is &quot;</span> + <span class="hljs-built_in">this</span>.color);<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">var</span> apple = <span class="hljs-keyword">new</span> fruits()<br>apple.say()    <span class="hljs-comment">//My color is red</span><br></code></pre></td></tr></table></figure><br>这里将一个对象赋值给fruits的原型,实例化的对象都能共享一些属性和方法，具体原型，原型链，和继承在另外一篇文章会详细介绍,我们看到的结果是对于apple调用函数的this同样可以正确识别到color的属性。</p><h2 id="apply、call"><a href="#apply、call" class="headerlink" title="apply、call"></a>apply、call</h2><p>在js中，call 和 apply 都是在特定的作用域中调用函数，等于设置了函数体内的this对象的值。如果我们有一个对象banana= {color : “yellow”} ,我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sqf">banana = &#123;<br>    <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;yrllow&#x27;</span><br>&#125;<br>apple.<span class="hljs-built_in">say</span>.<span class="hljs-built_in">call</span>(banana) <span class="hljs-comment">// My color is yellow</span><br><span class="hljs-built_in">apply</span>.<span class="hljs-built_in">say</span>.<span class="hljs-built_in">apply</span>(banana) <span class="hljs-comment">// My color is yellow</span><br></code></pre></td></tr></table></figure><br>所以，可以看出 call 和 apply 是为了动态改变 this 而出现的，当一个 object 没有某个方法（本例子中banana没有say方法），但是其他的有（本例子中apple有say方法），我们可以借助call或apply用其它对象的方法来操作。</p><h3 id="apply、call-区别"><a href="#apply、call-区别" class="headerlink" title="apply、call 区别"></a>apply、call 区别</h3><p>对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样。例如，有一个函数定义如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> func = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arg1, arg2</span>) </span>&#123;<br>     <br>&#125;<br></code></pre></td></tr></table></figure><br>call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里,或者是arguments对象。<br>就可以通过如下方式来调用：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">func.call(<span class="hljs-keyword">this</span>, arg1, arg2)<br>func.apply(<span class="hljs-keyword">this</span>, [arg1, arg2])<br>func.apply(<span class="hljs-keyword">this</span>, arguments)<br></code></pre></td></tr></table></figure></p><h3 id="常见apply-call应用"><a href="#常见apply-call应用" class="headerlink" title="常见apply call应用"></a>常见apply call应用</h3><h4 id="数组之间追加"><a href="#数组之间追加" class="headerlink" title="数组之间追加"></a>数组之间追加</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> array1 = [<span class="hljs-number">12</span> , <span class="hljs-string">&quot;foo&quot;</span> , &#123;name:<span class="hljs-string">&quot;Joe&quot;</span>&#125; , -<span class="hljs-number">2458</span>]; <br><span class="hljs-built_in">var</span> array2 = [<span class="hljs-string">&quot;Doe&quot;</span> , <span class="hljs-number">555</span> , <span class="hljs-number">100</span>]; <br>Array.prototype.<span class="hljs-built_in">push</span>.<span class="hljs-built_in">apply</span>(array1, array2); <br>// array1 值为  [<span class="hljs-number">12</span> , <span class="hljs-string">&quot;foo&quot;</span> , &#123;name:<span class="hljs-string">&quot;Joe&quot;</span>&#125; , -<span class="hljs-number">2458</span> , <span class="hljs-string">&quot;Doe&quot;</span> , <span class="hljs-number">555</span> , <span class="hljs-number">100</span>] <br></code></pre></td></tr></table></figure><h4 id="获取数组中的最大值和最小值"><a href="#获取数组中的最大值和最小值" class="headerlink" title="获取数组中的最大值和最小值"></a>获取数组中的最大值和最小值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span>  numbers = [<span class="hljs-number">5</span>, <span class="hljs-number">458</span> , <span class="hljs-number">120</span> , -<span class="hljs-number">215</span> ]; <br><span class="hljs-keyword">var</span> maxInNumbers = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>, numbers),   <span class="hljs-comment">//458</span><br>    maxInNumbers = <span class="hljs-built_in">Math</span>.max.call(<span class="hljs-built_in">Math</span>,<span class="hljs-number">5</span>, <span class="hljs-number">458</span> , <span class="hljs-number">120</span> , -<span class="hljs-number">215</span>); <span class="hljs-comment">//458</span><br></code></pre></td></tr></table></figure><p>number 本身没有 max 方法，但是 Math 有，我们就可以借助 call 或者 apply 使用其方法。</p><h4 id="验证是否是数组（前提是toString-方法没有被重写过）"><a href="#验证是否是数组（前提是toString-方法没有被重写过）" class="headerlink" title="验证是否是数组（前提是toString()方法没有被重写过）"></a>验证是否是数组（前提是toString()方法没有被重写过）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-title">functionisArray</span>(<span class="hljs-params">obj</span>)</span>&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(obj) === <span class="hljs-string">&#x27;[object Array]&#x27;</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类（伪）数组使用数组方法"><a href="#类（伪）数组使用数组方法" class="headerlink" title="类（伪）数组使用数组方法"></a>类（伪）数组使用数组方法</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var domNodes = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>prototype.slice.call(document.get<span class="hljs-constructor">ElementsByTagName(<span class="hljs-string">&quot;*&quot;</span>)</span>);<br></code></pre></td></tr></table></figure><p>Javascript中存在一种名为伪数组的对象结构。比较特别的是 arguments 对象，还有像调用 getElementsByTagName , document.childNodes 之类的，它们返回NodeList对象都属于伪数组。不能应用 Array下的 push , pop 等方法。<br>但是我们能通过 Array.prototype.slice.call 转换为真正的数组的带有 length 属性的对象，这样 domNodes 就可以应用 Array 下的所有方法了。</p><h3 id="apply-call面试题练习"><a href="#apply-call面试题练习" class="headerlink" title="apply,call面试题练习"></a>apply,call面试题练习</h3><p>定义一个 log 方法，让它可以代理 console.log 方法，常见的解决方法是：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span><span class="hljs-params">(msg)</span>　&#123;</span><br>  console.<span class="hljs-built_in">log</span>(msg);<br>&#125;<br><span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>);    <span class="hljs-comment">//1</span><br><span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);    <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><br>上面方法可以解决最基本的需求，但是当传入参数的个数是不确定的时候，上面的方法就失效了，这个时候就可以考虑使用 apply 或者 call，注意这里传入多少个参数是不确定的，所以使用apply是最好的，方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log.apply(<span class="hljs-built_in">console</span>, <span class="hljs-built_in">arguments</span>);<br>&#125;;<br>log(<span class="hljs-number">1</span>);    <span class="hljs-comment">//1</span><br>log(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);    <span class="hljs-comment">//1 2</span><br></code></pre></td></tr></table></figure><br> 接下来的要求是给每一个 log 消息添加一个”(app)”的前辍，比如：<br><figure class="highlight rsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rsl"><span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hello world&quot;</span>); <span class="hljs-comment">//(app)hello world</span><br></code></pre></td></tr></table></figure><br>该怎么做比较优雅呢?这个时候需要想到arguments参数是个伪数组，通过 Array.prototype.slice.call 转化为标准数组，再使用数组方法unshift，像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>);<br>  args.unshift(<span class="hljs-string">&#x27;(app)&#x27;</span>);<br> <br>  <span class="hljs-built_in">console</span>.log.apply(<span class="hljs-built_in">console</span>, args);<br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind()最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的this值。常见的错误就像上面的例子一样，将方法从对象中拿出来，然后调用，并且希望this指向原来的对象。如果不做特殊处理，一般会丢失原来的对象。使用bind()方法能够很漂亮的解决这个问题<br>一个简单的例子：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> bar <span class="hljs-operator">=</span> function()&#123;<br>console.log(this.x)<br>&#125;<br><span class="hljs-keyword">var</span> foo <span class="hljs-operator">=</span> &#123;<br>x:<span class="hljs-number">3</span><br>&#125;<br>bar(); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">=</span> </span>bar.bind(foo)<br><span class="hljs-function"><span class="hljs-keyword">func</span>()</span> <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><br>这里我们创建了一个新的函数 func，当使用 bind() 创建一个绑定函数之后，它被执行的时候，它的 this 会被设置成 foo ， 而不是像我们调用 bar() 时的全局作用域。<br>上面例题中用bind可以修改未如下:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&quot;red&quot;</span><br>    <span class="hljs-keyword">var</span> a = &#123;<br>        color: <span class="hljs-string">&quot;blue&quot;</span>,<br>        func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.color)     <br>        &#125;,<br>        func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">this</span>.func1()<br>            &#125;.bind(a), <span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;;<br>    a.func2()     <span class="hljs-comment">// blue</span><br></code></pre></td></tr></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><p>bind()的另一个最简单的用法是使一个函数拥有预设的初始参数。只要将这些参数（如果有的话）作为bind()的参数写在this后面。当绑定函数被调用时，这些参数会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们后面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">list</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> list1 = list(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [1, 2, 3]</span><br><br><span class="hljs-comment">// 预定义参数37</span><br><span class="hljs-keyword">var</span> leadingThirtysevenList = list.bind(<span class="hljs-literal">undefined</span>, <span class="hljs-number">37</span>)<br><br><span class="hljs-keyword">var</span> list2 = leadingThirtysevenList(); <span class="hljs-comment">// [37]</span><br><span class="hljs-keyword">var</span> list3 = leadingThirtysevenList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [37, 1, 2, 3]</span><br>和<span class="hljs-built_in">setTimeout</span>一起使用<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Bloomer</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.petalCount = <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">12</span>) + <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-comment">// 1秒后调用declare函数</span><br>Bloomer.prototype.bloom = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-built_in">this</span>.declare.bind(<span class="hljs-built_in">this</span>), <span class="hljs-number">100</span>)<br>&#125;;<br><br>Bloomer.prototype.declare = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我有 &#x27;</span> + <span class="hljs-built_in">this</span>.petalCount + <span class="hljs-string">&#x27; 朵花瓣!&#x27;</span>)<br>&#125;;<br><br><span class="hljs-keyword">var</span> bloo = <span class="hljs-keyword">new</span> Bloomer()<br>bloo.bloom() <span class="hljs-comment">//我有 5 朵花瓣!</span><br></code></pre></td></tr></table></figure><br>注意：对于事件处理函数和setInterval方法也可以使用上面的方法</p><h3 id="绑定函数作为构造函数"><a href="#绑定函数作为构造函数" class="headerlink" title="绑定函数作为构造函数"></a>绑定函数作为构造函数</h3><p>绑定函数也适用于使用new操作符来构造目标函数的实例。当使用绑定函数来构造实例，注意：this会被忽略，但是传入的参数仍然可用。<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Point</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.x = x<br>  <span class="hljs-keyword">this</span>.y = y<br>&#125;<br><br>Point.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.x + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-keyword">this</span>.y)<br>&#125;<br><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Point(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>p.toString() <span class="hljs-comment">// &#x27;1,2&#x27;</span><br><br><br><span class="hljs-keyword">var</span> emptyObj = &#123;&#125;<br><span class="hljs-keyword">var</span> YAxisPoint = Point.bind(emptyObj, <span class="hljs-number">0</span><span class="hljs-comment">/*x*/</span>)<br><span class="hljs-comment">// 实现中的例子不支持,</span><br><span class="hljs-comment">// 原生bind支持:</span><br><span class="hljs-keyword">var</span> YAxisPoint = Point.bind(<span class="hljs-literal">null</span>, <span class="hljs-number">0</span><span class="hljs-comment">/*x*/</span>)<br><br><span class="hljs-keyword">var</span> axisPoint = <span class="hljs-keyword">new</span> YAxisPoint(<span class="hljs-number">5</span>)<br>axisPoint.toString() <span class="hljs-comment">// &#x27;0,5&#x27;</span><br><br>axisPoint <span class="hljs-keyword">instanceof</span> Point <span class="hljs-comment">// true</span><br>axisPoint <span class="hljs-keyword">instanceof</span> YAxisPoint <span class="hljs-comment">// true</span><br><span class="hljs-keyword">new</span> Point(<span class="hljs-number">17</span>, <span class="hljs-number">42</span>) <span class="hljs-keyword">instanceof</span> YAxisPoint <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></p><h3 id="捷径"><a href="#捷径" class="headerlink" title="捷径"></a>捷径</h3><p>bind()也可以为需要特定this值的函数创造捷径。</p><p>例如要将一个类数组对象转换为真正的数组，可能的例子如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> slice = Array<span class="hljs-selector-class">.prototype</span>.slice<br><br><span class="hljs-comment">// ...</span><br><br>slice<span class="hljs-selector-class">.call</span>(arguments)<br></code></pre></td></tr></table></figure><br>如果使用bind()的话，情况变得更简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> unboundSlice = <span class="hljs-built_in">Array</span>.prototype.slice;<br><span class="hljs-keyword">var</span> slice = <span class="hljs-built_in">Function</span>.prototype.call.bind(unboundSlice)<br><br><span class="hljs-comment">// ...</span><br><br>slice(<span class="hljs-built_in">arguments</span>)<br></code></pre></td></tr></table></figure></p><h2 id="apply、call、bind比较"><a href="#apply、call、bind比较" class="headerlink" title="apply、call、bind比较"></a>apply、call、bind比较</h2><p>那么 apply、call、bind 三者相比较，之间又有什么异同呢？何时使用 apply、call，何时使用 bind 呢。简单的一个例子：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> obj = &#123;<br>    x: <span class="hljs-number">81</span><br>&#125;<br> <br><span class="hljs-selector-tag">var</span> foo = &#123;<br>    getX: function() &#123;<br>        return this.x<br>    &#125;<br>&#125;<br> <br>console<span class="hljs-selector-class">.log</span>(foo<span class="hljs-selector-class">.getX</span><span class="hljs-selector-class">.bind</span>(obj)()) <span class="hljs-comment">//81</span><br>console<span class="hljs-selector-class">.log</span>(foo<span class="hljs-selector-class">.getX</span><span class="hljs-selector-class">.call</span>(obj))   <span class="hljs-comment">//81</span><br>console<span class="hljs-selector-class">.log</span>(foo<span class="hljs-selector-class">.getX</span><span class="hljs-selector-class">.apply</span>(obj))  <span class="hljs-comment">//81</span><br></code></pre></td></tr></table></figure><br>三个输出的都是81，但是注意看使用 bind() 方法的，他后面多了对括号。</p><p>也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>this表示函数据以执行的环境对象,this指向的是最后调用它的对象</li><li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的<br>第一个参数都是this要指向的对象；</li><li>apply 、 call 、bind 三者都可以利用后续参数传参,apply可以传类数组或者arguments，但是call,bind只能单个每个传递(用逗号隔开)</li><li>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;在js函数内部有一个特殊的对象就是this,行为和Java中的this大致类似。this引用的是函数据以执行的环境对象-或者</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS的异步与事件循环探微</title>
    <link href="http://example.com/2021/04/28/JS-asynchronous/"/>
    <id>http://example.com/2021/04/28/JS-asynchronous/</id>
    <published>2021-04-28T17:30:00.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript起源"><a href="#JavaScript起源" class="headerlink" title="JavaScript起源"></a>JavaScript起源</h2><p>1994年，网景公司（Netscape）发布了Navigator浏览器0.9版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。</p><p><img src="http://cdn.hexblog.cn/20190602-002.png"/></p><p>网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。1995年JavaScript诞生了,起初名字为Livescript，但是后来网景与Sun公司成立了一个开发联盟。Sun公司那时大肆宣传Java这种语言可以”一次编写，到处运行”（Write Once, Run Anywhere），后面LiveScript改名为JavaScript，本质上来说JavaScript和Java没什么关系（单纯蹭热度）。</p><p><img src="http://cdn.hexblog.cn/20190602-003.jpg"/></p><p>如今，JavaScript的用途而是具备了与浏览器窗口及其内容等几乎所有方面交互的能力,已经成为一门功能全面的编程语言。</p><h2 id="同步与异步-阻塞与非阻塞"><a href="#同步与异步-阻塞与非阻塞" class="headerlink" title="同步与异步,阻塞与非阻塞"></a>同步与异步,阻塞与非阻塞</h2><p>计算机领域中的同步（Synchronous）和异步（Asynchronous）和我们生活中的同步和异步的概念是不太一样。生活中的同步，突出的是‘同’，相同的步伐，是咱俩一起行动，比如一起去逛街吃饭饭睡觉觉。异步则是你忙你的，我忙我的，步调不致且互不干扰。到计算机里的同步和异步则关注的是消息通知机制。</p><p>计算机领域所谓同步，就是在发出一个<strong>调用</strong>时，在没有得到结果之前，该<strong>调用</strong>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<strong>调用者</strong>主动等待这个<strong>调用</strong>的结果。</p><p>而异步则是相反，<em>调用</em>在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p><p>打个比如:以打电话为例,你给小明打电话,问他借本书,如果是同步机制,小明就会说,我看一下哈，不知道有没有,（可能是5秒，也可能是一天）告诉你结果（返回结果）。而异步通信机制，小明直接告诉你我查一下啊,看看我的书柜里面有没有,查好了打电话给你,然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里小明通过“回电”这种方式来回调。</p><p><img src="http://cdn.hexblog.cn/20190602-004.jpg"/></p><p>这里需要与阻塞非阻塞做一下区分,阻塞和非阻塞关注的是程序在<strong>等待调用结果（消息，返回值）时的状态</strong>.</p><p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p><p><img src="http://cdn.hexblog.cn/20190602-007.jpg"/></p><p>还是上面的例子，你打电话问小明有书借没，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管小明有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下小明有没有返回结果。在这里阻塞与非阻塞与是否同步异步无关。跟小明通过什么方式回答你结果无关。</p><h2 id="JavaScript-Engine-Js-引擎"><a href="#JavaScript-Engine-Js-引擎" class="headerlink" title="JavaScript Engine(Js 引擎)"></a>JavaScript Engine(Js 引擎)</h2><p>js 引擎即 js 虚拟机，主要是负责解析和执行 js 的，它是浏览器所实现的，不同的浏览器有不同的实现方式「采用 c/c++ 实现」，这里以比较流行V8引擎为例来说明<br>该引擎包括两个主要组件：</p><ul><li><p>Memory Heap 内存堆 ——  这是内存分配发生的地方</p></li><li><p>Call Stack 调用堆栈 ——  这是在你代码执行时栈帧存放的位置(js 是单线程说的就是 call stack)</p></li></ul><p><img src="http://cdn.hexblog.cn/20190531-001.png"/></p><p>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程。<br>浏览器有渲染引擎和 js引擎，浏览器是从上向下解析 html 标签的，当遇到 script 标签(js 代码)时会立即停止解析，直接执行 js 脚本，所以渲染引擎和 js 引擎是互斥的(js 操作 DOM 的会影响渲染)，这一个过程是同步的，所以加载一个耗时的 js 会导致界面卡死的，影响用户体验。</p><p>另外假定js同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<br>所以，为了避免复杂性，从一诞生，Js就是单线程，这已经成这门语言的核心特征，将来也不会改变。</p><blockquote><p>注:webworker支持多线程,但是不能访问DOM。</p></blockquote><h2 id="Call-Stack-调用栈"><a href="#Call-Stack-调用栈" class="headerlink" title="Call Stack(调用栈)"></a>Call Stack(调用栈)</h2><p>先上代码<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sas">function multiply(<span class="hljs-meta">x</span>, y) &#123;<br>    <span class="hljs-meta">return</span> <span class="hljs-meta">x</span> <span class="hljs-comment">* y;</span><br>&#125;<br>function printSquare(<span class="hljs-meta">x</span>) &#123;<br>    var s = multiply(<span class="hljs-meta">x</span>, <span class="hljs-meta">x</span>);<br>    console<span class="hljs-meta">.log(</span>s);<br>&#125;<br>printSquare(5);<br></code></pre></td></tr></table></figure></p><p>当引擎开始执行这个代码时，call stack将会变成空的。之后，执行的步骤如下：</p><p><img src="http://cdn.hexblog.cn/20190531-003.png"/></p><p>call stack的每个入口被称为 stack frame（栈帧）。顾名思义,栈即遵循先进先出原则，当一个方法调用的时候就入栈，执行完成以后就出栈。</p><h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><p>看完前面的铺垫你是否会产生这些疑问，由于 js 引擎中的 call stack同一时间只能干一件事情，那么他是如何是实现异步操作的？<br>因为Js引擎只能自上而下执行,万一上一行解析时间很长,调用者一直等待着结果的返回,那么下面的代码不就被阻塞了么。</p><p> 答案是虽然 js 是单线程的，但浏览器却是多线程的，我们知道 js 有好多 API 有些不是核心 js 语言的一部分，比如 BOM DOM AJAX setTimeOut Canvas WegGl 等 api 浏览器可以在调用之外执行这些 api(另起一个或多个线程跑这些 api)</p><p><img src="http://cdn.hexblog.cn/20190602-005.jpg"/></p><p>这些 api 就可以独立于调用栈call stack来执行自己的功能，但是有一个问题是如果这些 api 执行完以后该怎么办呢？有两种方案</p><ol><li>我们将 web api 完成的方法直接推送到调用栈call stack</li><li>我们采取一些机制来保存这些响应，在合适的时候推送给调用栈</li></ol><p>第 1 种方法显然不靠谱，如果 web api 执行完以后直接把结果给调用栈可以会影响正在执行的调用栈，所以浏览器采用第二种方法，使用消息队列来保存这些 web api 执行的响应以便在调用栈可以调用的时候推送给调用栈，这个保存消息的东西就是接下来我们要说的 Message Queue</p><h2 id="Message-Queue-回调队列"><a href="#Message-Queue-回调队列" class="headerlink" title="Message Queue(回调队列)"></a>Message Queue(回调队列)</h2><p>Message Queue(消息队列也叫 Callback Queue)是用来保存 Web Api 调用完成以后的所有消息的回调函数，当call stack为空时(也就是调用栈中的方法执行完毕以后)Message Queue 中的回调方法(先进先出)会被添加到call stack 中去执行，但是浏览器是什么方式来把调用栈和 message Queue 联系起来的「什么机制把 Message Queue 中的回调方法给 call stack 当 call stack 为空的时候」，它就是 Event Loop</p><p><img src="http://cdn.hexblog.cn/20190602-006.jpg"/></p><h2 id="Event-Loop-事件循环"><a href="#Event-Loop-事件循环" class="headerlink" title="Event Loop(事件循环)"></a>Event Loop(事件循环)</h2><p>Event Loop 是把 call stack 和 Message Queue 联系起来的纽带和桥梁，Event Loop 是一个基于事件的并发模型，它时刻在监听着消息队列，如果有完成的消息它此刻还要关心 call stack 是否为空，如果为空则把 Messag Queue 中的回调结果推送给 call statck 回调方法执行<br>Event Loop 做两件事情<br>1、监听 Message Queue(是否有消息)<br>2、监听 call statck (看是否为空，如果为空则推送结果)</p><p><img src="http://cdn.hexblog.cn/20190531-002.png"/></p><p>经典问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3&#x27;</span>)  <br><span class="hljs-comment">//       1，3，2</span><br></code></pre></td></tr></table></figure><p>我们来分析一下,当上面的代码加载在浏览器中步骤是什么样子:</p><ol><li>console.log(‘1’)被推到调用栈中然后当结束时从栈中被移除。</li><li>接下来setTimeOut( )函数被调用，所以它被推到了栈顶。setTimeOut( )有两个参数：一是回调，二是毫秒数。</li><li>浏览器单独开一个线程去执行这个setTimeOut( )方法在web APIs环境中开始了一个0秒的计时器此时，setTimeOut( )执行完毕并被移出栈。</li><li>console.log(‘3’)被推到栈里，执行完后被移除。</li><li>web api 执行 setTimeout 方法完毕，将结果给 Message Queue ，此是 web api 就变成空的，<br>栈也已经变成空的，Event Loop 监听着 Message Queue。</li><li>Event loop 把 Message Queue 中的方法取出来，推给空的调用栈.</li><li>执行其中的方法体 console.log(‘2’)， 执行完毕 出栈，调用栈变为空</li></ol><h2 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h2><p>以上的Event Loop过程是一个宏观的表述，实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）。</p><p>以下事件属于宏任务：</p><ul><li>setInterval()</li><li>setTimeout()</li><li>setImmediate()</li><li>I/O</li></ul><p>以下事件属于微任务:</p><ul><li>process.nextTick()</li><li>new Promise()(有些实现的promise 将 then 方法放到了宏任务中，浏览器默认放到了微任务)</li><li>Object.observe (已废弃)</li><li>MutationObserver（不兼容，已废弃）</li><li>MessageChannel（vue中 nextClick 实现原理）</li></ul><p>前面我们介绍过，在一个Event Loop中，异步事件返回结果后会被放到一个Message Queue中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><p>我们只需记住当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次Event Loop中，微任务永远在宏任务之前执行。</p><p>这样就能解释下面这段代码的结果：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> () &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-keyword">function</span>(resolve,reject)&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>    resolve(<span class="hljs-number">3</span>)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-keyword">function</span>(val)&#123;<br>    <span class="hljs-built_in">console</span>.log(val);<br>&#125;)<br><span class="hljs-comment"># 2</span><br><span class="hljs-comment"># 3</span><br><span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此我们把 js 非阻塞和异步,Call back 与Event Loop原理有所了解，现在总结一下</p><ol><li>同步指的是发起调用后，调用方主动等待调用结果；异步指的是,发起调用后，调用者没有立刻得到返回结果,后续可通过回调等方式获取其结果。</li><li>阻塞关注的是等待调用结果时的状态,若线程挂起，等待结果返回就是阻塞.若调用在不能立刻得到结果之前，该调用不会阻塞当前线程会立刻返回则是非阻塞</li><li>js 是非阻塞异步的单线程(单线程指的就是 Call stack)</li><li>js 实现异步的方式是基于 Event Loop 的并发模型</li><li>浏览器的 web api 不是 js 核心的部分，但是和 call stack 不冲突执行(浏览器另外开线程去执)</li><li>web api 的执行结果不能直接给 call stack 先要通过 Message Queu 把结果存起来，等待 Event Loop 去处理</li><li>Event Loop 如果发现 call statck 为空时「此时就是推入 Message Queue 中的消息的最佳时机」取出消息队列中的消息推入给调用栈，异步结束</li><li>Message Queue分两种宏任务消息队列,微任务消息队列,同一次Event Loop中，微任务永远在宏任务之前执行</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/e865c3a7ba10">https://www.jianshu.com/p/e865c3a7ba10</a></li><li><a href="https://juejin.im/post/5c9de08e51882568093c1e9d">https://juejin.im/post/5c9de08e51882568093c1e9d</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScript起源&quot;&gt;&lt;a href=&quot;#JavaScript起源&quot; class=&quot;headerlink&quot; title=&quot;JavaScript起源&quot;&gt;&lt;/a&gt;JavaScript起源&lt;/h2&gt;&lt;p&gt;1994年，网景公司（Netscape）发布了Navigat</summary>
      
    
    
    
    <category term="原理探索" scheme="http://example.com/categories/%E5%8E%9F%E7%90%86%E6%8E%A2%E7%B4%A2/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="异步" scheme="http://example.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
    <category term="事件循环" scheme="http://example.com/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>浅谈爬虫入门</title>
    <link href="http://example.com/2021/04/28/learn-spider/"/>
    <id>http://example.com/2021/04/28/learn-spider/</id>
    <published>2021-04-28T17:25:35.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h2><p><img src="http://cdn.hexblog.cn/20190517-001.png" alt="爬虫图片"></p><p>网络抓取程序，俗称“爬虫”，爬虫的基本原理就是获取目标网址，下载网页，通过分析数据中的关键信息，获取资源。爬虫这个实际是翻译自英文的spider, 实际是蜘蛛的意思， 这个比喻很形象，蜘蛛在网上伺机而动，捕获食物。而我们的爬虫程序也就在Inerternet上爬取我们所需要的网络资源。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>爬虫最重要的作用是充当搜索引擎，最简单的，我们上网浏览网页， 那我把网页都抓下来。建立了一个库，根据你搜的那个关键字（query），给你返回相应的数据，里面当然会根据相关度建立指标，比如比较权威的page rank,有那些权威的网站引用了，那个相关度就增高了。<br> <img src="http://cdn.hexblog.cn/20190517-002.png" alt="baidu vs google"><br>百度和谷歌每天都会更新这个库。最早做搜索的时候，有种比较流氓的做法，就是去爬取竞争对手的搜出来的结果， 每个早期公司都会这个做，像之前百度会有参数叫谷歌参数，在搜索权重里面站的参数还比较重。</p><p> 360就更厉害了，干脆把竞争对手直接抓过来后，直接建立一个库，然后返回数据给用户，这个真是比较机智。到后面都占据搜索市场10%以上。当然这里有个法律安全问题。<br> <img src="http://cdn.hexblog.cn/20190517-003.png" alt="360"><br>第二个作用是数据统计及分析， 这个范围就更多更广了，举一个很简单的例子，想看看各大招聘网站各类职务信息和热门网站以及薪水，想抓取雪球高回报用户的行为，找出推荐股票等等，我们都可以使用爬虫技术，来给我们收集数据，辅助我们决策。  </p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>现在我们进入本文的重点， 掌握爬虫技术需要那些知识和学习阶段的建议。</p><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p> <img src="http://cdn.hexblog.cn/20190517-004.png" alt="python"></p><p>首先入门，需要学习一门编程语言，以Python为例，基础语法、类、函数、数据结构中的list和dict等，跟着例子敲敲，网上资源很多，书籍像《笨办法学Python》， 网站像廖雪峰的个人网站，都是有不错的资源。</p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p> <img src="http://cdn.hexblog.cn/20190517-005.png" alt="http"><br>爬虫就是通过网络请求从远程服务器下载数据的过程，互联网消息传输的基本协议就是http协议，先了解基本的get，post，delete等方法和编码。慢慢地掌握浏览器是发送http请求向目标站点获取资源信息，熟悉格式规范。<br>网络请求框架都是对 HTTP 协议的实现，Python语言中著名的网络请求库 Requests 就是一个模拟浏览器发送 HTTP 请求的网络库。相当于通过这个库打开的新世界的大门， 我们可以获取网页的源代码。了解 HTTP 协议之后，学有余力，你就可以专门有针对性的学习和网络相关的模块了，Python 自带有 urllib、urllib2（Python3中的urllib），httplib，Cookie等内容，也可以暂时先跳过。把requests的API弄熟。</p><h3 id="Html语言"><a href="#Html语言" class="headerlink" title="Html语言"></a>Html语言</h3><p> <img src="http://cdn.hexblog.cn/20190517-006.png" alt="html"><br>很基础的内容，我们要爬取网页，自然需要知道网页使用的技术，知道文档树概念，30分钟就大致了解即可。</p><h3 id="数据格式（HTML文本，-XML-或者Json格式）"><a href="#数据格式（HTML文本，-XML-或者Json格式）" class="headerlink" title="数据格式（HTML文本， XML 或者Json格式）"></a>数据格式（HTML文本， XML 或者Json格式）</h3><p>我们通过网络请求库 Reuests 获得从网站服务器后端发过来数据，数据有可能有不同的格式正确处理这些数据，你要熟悉每种数据类型的解决方案，比如 JSON 数据可以直接使用 Python自带的模块 json等。</p><h3 id="解析工具"><a href="#解析工具" class="headerlink" title="解析工具"></a>解析工具</h3><p>我的的目标信息藏在网页里，那么通过什么方法可以提取呢？传统的方法是使用正则表达式（Python模块中的re），对于Python而言，我们有方便的第三方解析库，可以使用。像Pyquery，BeautifulSoup等，学习方法最快速的无非是看官方文档中的quickstart先熟悉API。推荐使用Pyquery,它模仿Jquery几乎同样的API接口，对DOM操作十分方便。</p><h3 id="数据库知识"><a href="#数据库知识" class="headerlink" title="数据库知识"></a>数据库知识</h3><p> <img src="http://cdn.hexblog.cn/20190517-007.png" alt="sql"></p><p>爬取的数据需要持久化，数据库基本知识也需要掌握（MySQL、SQLServer、Oracle、Mongodb等）SQL语言（懂基本的增删改查：add、delete、update、select），时下非关系型数据库很流行，像Mongodb使用起来就简单便利。</p><h3 id="网络抓包-浏览器抓包"><a href="#网络抓包-浏览器抓包" class="headerlink" title="网络抓包/浏览器抓包"></a>网络抓包/浏览器抓包</h3><p> <img src="http://cdn.hexblog.cn/20190517-008.png" alt="fiddler"><br>学会使用 Chrome 或者 FireFox 浏览器去审查元素，跟踪请求信息等等，现在大部分网站有配有APP和手机浏览器访问的地址，优先使用这些接口，相对更容易。还有 Fiddler 等代理工具的使用。</p><h3 id="Ajax技术原理"><a href="#Ajax技术原理" class="headerlink" title="Ajax技术原理"></a>Ajax技术原理</h3><p> <img src="http://cdn.hexblog.cn/20190517-009.png" alt="ajax"><br>实际上就是浏览器提供了使用 HTTP 协议收发数据的接口，名为 AJAX，这像技术在web应用还比较广泛的，在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。<br>学习了以上，基本也清晰了整个爬取过程。一般地一个爬虫程序组成部分如首先Downloader 负责下载页面（requests、urllib），其次HTMLParser 负责解析页面（Pyquery   lxml BeautifulSoup），最后是根据业务逻辑获取dataModel字段，完成资源采集。</p><h2 id="爬虫与反爬虫"><a href="#爬虫与反爬虫" class="headerlink" title="爬虫与反爬虫"></a>爬虫与反爬虫</h2><p>当然作为被爬取的一方，我然有我不希望被被人爬取的内容，那限制爬取这些内容一般在robots.txt里。一个文明的爬虫，如搜索引擎的爬虫，首先在网站根目录查看是否有此列表，依此来确认访问范围。<br>以知乎为例www.zhihu.com/robots.txt<br> <img src="http://cdn.hexblog.cn/20190517-010.png" alt="robots"><br>以上不允许爬取的内容就是相当于立了牌子，说禁止入内，robots.txt 只是约定，爬虫遵守或者不遵守完全在于爬虫作者的意愿。下面仅从技术的角度尝试探讨，反爬取策略与应对措施。</p><h3 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h3><p>header字段增加User-Agent检测，或者还有部分网站会对Referer进行检测（资源网站的防盗链就是检测Referer）可以直接在爬虫中添加Headers，将浏览器的User-Agent复制到爬虫的Headers中；或者将Referer值修改为目标网站域名。对于检测Headers的反爬虫，在爬虫中修改或者添加Headers就能很好的绕过。</p><h3 id="IP代理池"><a href="#IP代理池" class="headerlink" title="IP代理池"></a>IP代理池</h3><p> 还有部分网站是通过检测用户行为，例如同一IP短时间内多次访问同一页面，或者同一账户短时间内多次进行相同操作。大多数网站都是前一种情况，对于这种情况，使用IP代理就可以解决。可以专门写一个爬虫，爬取网上公开的代理ip，检测后全部保存起来。这样的代理ip爬虫经常会用到，最好自己准备一个。有了大量代理ip后可以每请求几次更换一个ip，这在requests或者urllib2中很容易做到，这样就能很容易的绕过第一种反爬虫。对于第二种情况，可以在每次请求后随机间隔几秒再进行下一次请求。有些有逻辑漏洞的网站，可以通过请求几次，退出登录，重新登录，继续请求来绕过同一账号短时间内不能多次进行相同请求的限制。</p><h3 id="cookies池"><a href="#cookies池" class="headerlink" title="cookies池"></a>cookies池</h3><p> 网站限制一些操作需要在登录的情况下,从存储模块获取用户名称，密码模拟登录，判断登录成功,爬取对应链接带上从cookies池里面随机获得的cookies,完成爬去工作。</p><h3 id="模拟人为操作"><a href="#模拟人为操作" class="headerlink" title="模拟人为操作"></a>模拟人为操作</h3><p> 上述的几种情况大多都是出现在静态页面，还有一部分网站，我们需要爬取的数据是通过ajax请求得到，或者通过JavaScript生成的，像很多页面频繁更新常采用这种方法。首先用需要对网络请求进行分析。如果能够找到ajax请求，也能分析出具体的参数和响应的具体含义，我们就能采用上面的方法，直接利用requests或者urllib2模拟ajax请求，对响应的json进行分析得到需要的数据。能够直接模拟ajax请求获取数据固然是极好的，但是有些网站把ajax请求的所有参数全部加密了。我们根本没办法构造自己所需要的数据的请求。除了加密ajax参数，它还把一些基本的功能都封装了，全部都是在调用自己的接口，而接口参数都是加密的。遇到这样的网站，我们就不能用上面的方法了，方法是selenium+phantomJS框架，调用浏览器内核，并利用phantomJS执行js来模拟人为操作以及触发页面中的js脚本。从填写表单到点击按钮再到滚动页面，全部都可以模拟，不考虑具体的请求和响应过程，只是完完整整的把人浏览页面获取数据的过程模拟一遍。</p><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>当爬取操作，被网站判断为异常触发验证码来验证。当然我们python有优秀的图像识别库PIL库，也有识别验证码的库如pytesser,这不是本文重点，如果具体涉及到验证码识别这是算法工程师的事情了，对于一个优秀的爬虫工程师而言，自然是能规避出现验证码的情况。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>爬虫作为python最容易上手的方向之一，是比较容易让学习者有成就感的。一个网站能够防80%的爬虫已经算是很优秀，毕竟反爬虫可能误伤，降低用户体验。本文梳理了爬虫大概，希望有助于初学者入门。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爬虫原理&quot;&gt;&lt;a href=&quot;#爬虫原理&quot; class=&quot;headerlink&quot; title=&quot;爬虫原理&quot;&gt;&lt;/a&gt;爬虫原理&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.hexblog.cn/20190517-001.png&quot; alt=&quot;爬虫图片&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="技术概览" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88/"/>
    
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Git入门指南</title>
    <link href="http://example.com/2021/04/28/how-to-use-git/"/>
    <id>http://example.com/2021/04/28/how-to-use-git/</id>
    <published>2021-04-28T17:14:32.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Git是2005年Linus Torvalds 为了帮助管理 Linux(R) 内核开发而开发的一个开放源码的版本控制软件, 可以说是当今世界上最先进的分布式版本控制系统。</p><h3 id="SVN与Git"><a href="#SVN与Git" class="headerlink" title="SVN与Git"></a>SVN与Git</h3><p>SVN作为集中式版本控制系统的,版本库放在中央服务器。代码贡献者将各自的代码推送到中央服务器。这也就决定了集中式的版本控制系统必须联网,而且网速还不能慢。</p><p>Git与之相反，是分布式的，它没有中央服务器,每个人的电脑是一个完整的版本库,这样工作就不需要联网，多人协作就靠将各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>本篇试简单介绍Git的常用操作与原理</p><p><img src="http://cdn.hexblog.cn/20190527-018.png"/></p><ul><li>Workspace：工作区,即在电脑中看到的目录</li><li>Index / Stage：暂存区，存放在.git目录下的index文件中</li><li>Repository：仓库区（或本地仓库）工作区有一个隐藏目录.git,不算工作区，是git的版本库</li><li>Remote：远程仓库</li></ul><div style="align: center"><img src="http://cdn.hexblog.cn/20190527-016.png"/></div><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><ul><li>在当前目录新建一个Git代码库<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li>新建一个目录，将其初始化为Git代码库<figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs irpf90">git init [project-<span class="hljs-keyword">name</span>]<br></code></pre></td></tr></table></figure></li><li>下载一个项目和它的整个代码历史<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">[url</span>]<br></code></pre></td></tr></table></figure></li><li><p>克隆指定分支</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git clone -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[url]</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2></li><li><p>显示当前的Git配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure></li><li>编辑Git配置文件<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> -e [<span class="hljs-comment">--global]</span><br></code></pre></td></tr></table></figure></li><li>设置提交代码时的用户信息<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> [--<span class="hljs-keyword">global</span>] user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;[name]&quot;</span><br>git <span class="hljs-keyword">config</span> [--<span class="hljs-keyword">global</span>] user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2></li><li><p>添加改动文件(添加到暂存区)<br>添加所有改动文件（不包括 .gitignore 忽略的文件）:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> *<br></code></pre></td></tr></table></figure></li><li><p>添加指定文件到暂存区</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">git add [file1] [file2] ...<br></code></pre></td></tr></table></figure></li><li>添加指定目录到暂存区，包括子目录<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> [dir]<br></code></pre></td></tr></table></figure></li><li>添加当前目录的所有文件到暂存区<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> .<br></code></pre></td></tr></table></figure></li><li>添加每个变化前，都会要求确认对于同一个文件的多处变化，可以实现分次提交<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> -p<br></code></pre></td></tr></table></figure></li><li>查看文件改动和提交状态<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure></li><li>查看具体文件改动对比(工作区与版本库最新版本)<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git diff HEAD <span class="hljs-comment">-- [file]</span><br></code></pre></td></tr></table></figure></li><li>删除所有未添加文件的改动（使 git status 恢复到 clean 状态）<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">git checkout .<br></code></pre></td></tr></table></figure>删除某个文件的当前修改（未提交到暂存区）<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-tag">--</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure></li><li>删除工作区文件，并且将这次删除放入暂存区<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">git rm [file1] [file2] ...<br></code></pre></td></tr></table></figure></li><li>停止追踪指定文件，但该文件会保留在工作区<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">git <span class="hljs-keyword">rm</span> --cached [<span class="hljs-keyword">file</span>]<br></code></pre></td></tr></table></figure></li><li><p>改名文件，并且将这个改名放入暂存区</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git mv [<span class="hljs-built_in">file</span>-original] [<span class="hljs-built_in">file</span>-renamed]<br></code></pre></td></tr></table></figure><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3></li><li><p>提交暂存区到仓库</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m [message]<br></code></pre></td></tr></table></figure></li><li>提交暂存区的指定文件到仓库区<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">commit</span> <span class="hljs-selector-attr">[file1]</span> <span class="hljs-selector-attr">[file2]</span> ... <span class="hljs-selector-tag">-m</span> <span class="hljs-selector-attr">[message]</span><br></code></pre></td></tr></table></figure></li><li>提交工作区自上次commit之后的变化，直接到仓库区<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git commit -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure></li><li>提交时显示所有diff信息<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git commit -v</span><br></code></pre></td></tr></table></figure></li><li>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend -m [message]</span><br></code></pre></td></tr></table></figure></li><li>重做上一次commit，并包括指定文件的新变化<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">commit</span> <span class="hljs-selector-tag">--amend</span> <span class="hljs-selector-attr">[file1]</span> <span class="hljs-selector-attr">[file2]</span><br></code></pre></td></tr></table></figure><h3 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h3></li><li>查看所有分支<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure></li><li>列出所有远程分支<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -r</span><br></code></pre></td></tr></table></figure></li><li>列出所有本地分支和远程分支<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure></li><li>新建一个分支，但依然停留在当前分支<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure></li><li>新建一个分支，并切换到该分支<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure></li><li>新建一个分支，指向指定commit<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git branch <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure></li><li>新建一个分支，与指定的远程分支建立追踪关系<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch --track <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span><br></code></pre></td></tr></table></figure></li><li>切换到指定分支，并更新工作区<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure></li><li>切换到上一个分支<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout -<br></code></pre></td></tr></table></figure></li><li>建立追踪关系，在现有分支与指定的远程分支之间<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch --set-upstream <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span><br></code></pre></td></tr></table></figure></li><li>合并指定分支到当前分支<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">merge</span> [branch]<br></code></pre></td></tr></table></figure></li><li>选择一个commit，合并进当前分支<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> cherry-pick [commit]<br></code></pre></td></tr></table></figure></li><li>删除分支<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-tag">-d</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure></li><li>当分支上面还有未完成的提交时，需要强制删除<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">git</span> <span class="hljs-variable">branch</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">branch</span><span class="hljs-operator">-</span><span class="hljs-variable">name</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></li><li><p>删除远程分支</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> --<span class="hljs-built_in">delete</span> [branch-name]<br>git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure></li><li><p>本地从远程分支拉取新建分支并切换到新分支</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch-name]</span> <span class="hljs-selector-attr">[remote/branch]</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li>列出所有tag<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span><br></code></pre></td></tr></table></figure></li><li>新建一个tag在当前commit<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>]<br></code></pre></td></tr></table></figure></li><li>新建一个tag在指定commit<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] [commit]<br></code></pre></td></tr></table></figure></li><li>删除本地tag<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [<span class="hljs-keyword">tag</span>]<br></code></pre></td></tr></table></figure></li><li>删除远程tag<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">git push origin <span class="hljs-symbol">:refs/tags/</span>[tagName]<br></code></pre></td></tr></table></figure></li><li>查看tag信息<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> show [tag]<br></code></pre></td></tr></table></figure></li><li>提交指定tag<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">push</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure></li><li>提交所有tag<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git push [remote] <span class="hljs-comment">--tags</span><br></code></pre></td></tr></table></figure></li><li><p>新建一个分支，指向某个tag</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2></li><li><p>显示有变更的文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure></li><li>显示当前分支的版本历史<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure></li><li>显示commit历史，以及每次commit发生变更的文件<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">log</span> <span class="hljs-comment">--stat</span><br></code></pre></td></tr></table></figure></li><li>搜索提交历史，根据关键词<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">git <span class="hljs-built_in">log</span> -S [<span class="hljs-function"><span class="hljs-keyword">keyword</span>]</span><br></code></pre></td></tr></table></figure></li><li>显示某个commit之后的所有变动，每个commit占据一行<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">log</span> [tag] HEAD --pretty=<span class="hljs-keyword">format</span>:%s<br></code></pre></td></tr></table></figure></li><li>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">git <span class="hljs-built_in">log</span> [<span class="hljs-keyword">tag</span>] HEAD --<span class="hljs-keyword">grep</span> feature<br></code></pre></td></tr></table></figure></li><li>显示某个文件的版本历史，包括文件改名<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">log</span> <span class="hljs-comment">--follow [file]</span><br>git whatchanged [<span class="hljs-built_in">file</span>]<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">* 显示分支合并图 一行显示<br>git log <span class="hljs-params">--graph</span> <span class="hljs-params">--pretty=oneline</span> <span class="hljs-params">--abbrev-commit</span> <span class="hljs-comment"># 得到sha1计算的版本号commit id</span><br></code></pre></td></tr></table></figure></li><li>显示指定文件相关的每一次diff<figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs irpf90">git <span class="hljs-built_in">log</span> -p [<span class="hljs-keyword">file</span>]<br></code></pre></td></tr></table></figure></li><li>显示过去5次提交<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">log</span> <span class="hljs-number">-5</span> <span class="hljs-comment">--pretty --oneline</span><br></code></pre></td></tr></table></figure></li><li>显示所有提交过的用户，按提交次数排序<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> shortlog -<span class="hljs-meta">sn</span><br></code></pre></td></tr></table></figure></li><li>显示指定文件是什么人在什么时间修改过<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git blame [<span class="hljs-built_in">file</span>]<br></code></pre></td></tr></table></figure></li><li>显示暂存区和工作区的差异<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff</span><br></code></pre></td></tr></table></figure></li><li>显示暂存区和上一个commit的差异<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">diff </span>--<span class="hljs-keyword">cached </span>[file]<br></code></pre></td></tr></table></figure></li><li>显示工作区与当前分支最新commit之间的差异<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff HEAD</span><br></code></pre></td></tr></table></figure></li><li>显示两次提交之间的差异<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">diff</span> [<span class="hljs-built_in">first</span>-branch]...[<span class="hljs-built_in">second</span>-branch]<br></code></pre></td></tr></table></figure></li><li>显示今天你写了多少行代码<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">diff </span>--<span class="hljs-keyword">shortstat </span><span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span><br></code></pre></td></tr></table></figure></li><li>显示某次提交的元数据和内容变化<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">show</span> [<span class="hljs-keyword">commit</span>]<br></code></pre></td></tr></table></figure></li><li>显示某次提交发生变化的文件<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">git show --<span class="hljs-keyword">name</span>-<span class="hljs-keyword">only</span> [commit]<br></code></pre></td></tr></table></figure></li><li>显示某次提交时，某个文件的内容<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">git show <span class="hljs-comment">[commit]</span>:<span class="hljs-comment">[filename]</span><br></code></pre></td></tr></table></figure></li><li><p>纪录每一次命令，可用于查找某一提交版本的 commit id。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git <span class="hljs-built_in">ref</span>log<br></code></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2></li><li><p>下载远程仓库的所有变动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> fetch [remote]<br></code></pre></td></tr></table></figure></li><li>远程仓库的删除与重命名<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> git remote rename [<span class="hljs-type">new_name</span>] [<span class="hljs-type">old_name</span>]<br><span class="hljs-variable">$</span> git remote <span class="hljs-built_in">rm</span> [<span class="hljs-type">old_name</span>]<br></code></pre></td></tr></table></figure></li><li>显示所有远程仓库<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure></li><li>显示某个远程仓库的信息<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git remote <span class="hljs-keyword">show </span>[remote]<br></code></pre></td></tr></table></figure></li><li>增加一个新的远程仓库，并命名<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git remote add <span class="hljs-selector-attr">[shortname]</span> <span class="hljs-selector-attr">[url]</span><br></code></pre></td></tr></table></figure></li><li>取回远程仓库的变化，并与本地分支合并<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure></li><li>上传本地指定分支到远程仓库<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">push</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure></li><li>强行推送当前分支到远程仓库，即使有冲突<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git push [remote] <span class="hljs-comment">--force</span><br></code></pre></td></tr></table></figure></li><li>推送所有分支到远程仓库<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git push [remote] <span class="hljs-comment">--all</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ul><li>恢复暂存区的指定文件到工作区<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure></li><li>恢复某个commit的指定文件到暂存区和工作区<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout <span class="hljs-selector-attr">[commit]</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure></li><li>恢复暂存区的所有文件到工作区<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">git checkout .<br></code></pre></td></tr></table></figure></li><li>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">git <span class="hljs-meta">reset</span> [<span class="hljs-meta">file</span>]<br></code></pre></td></tr></table></figure></li><li>重置暂存区与工作区，与上一次commit保持一致<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span><br></code></pre></td></tr></table></figure></li><li>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> [<span class="hljs-keyword">commit</span>]<br></code></pre></td></tr></table></figure></li><li>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard [commit]</span><br></code></pre></td></tr></table></figure></li><li>重置当前HEAD为指定commit，但保持暂存区和工作区不变<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--keep [commit]</span><br></code></pre></td></tr></table></figure></li><li>新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">revert</span> [commit]<br></code></pre></td></tr></table></figure></li><li>暂时将未提交的变化移除，稍后再移入<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash</span><br></code></pre></td></tr></table></figure></li><li>恢复操作(两步)<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">git stash apply <span class="hljs-comment"># 恢复后，stash内容并不删除</span><br>git stash drop <span class="hljs-comment"># 此时stash内容删除</span><br>git stash apply stash<span class="hljs-meta">@&#123;0&#125;</span> <span class="hljs-comment">#多次stash 可以查看并恢复指定stash</span><br></code></pre></td></tr></table></figure></li><li>恢复操作(一步)<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git stash <span class="hljs-keyword">pop</span> <span class="hljs-meta"># 恢复的同时把stash内容也删了</span><br>git stash list <span class="hljs-meta"># 此时是空的</span><br></code></pre></td></tr></table></figure><h2 id="其他记录"><a href="#其他记录" class="headerlink" title="其他记录"></a>其他记录</h2></li></ul><h2 id="创建分支修复临时bug"><a href="#创建分支修复临时bug" class="headerlink" title="创建分支修复临时bug"></a>创建分支修复临时bug</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span><br>git checkout -b issue-<span class="hljs-number">001</span><br><span class="hljs-comment"># 完成修复</span><br>git add *<br>git commit -m <span class="hljs-string">&quot;fix bug 001&quot;</span><br>git checkout <span class="hljs-literal">master</span><br>git merge --no-ff -m <span class="hljs-string">&quot;merged bug fix 101&quot;</span> issue-<span class="hljs-number">001</span> <span class="hljs-comment"># 保存之前的分支历史，更好查看merge历史,禁用fast forward</span><br></code></pre></td></tr></table></figure><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>Git工作区的根目录下创建一个特殊的.gitignore文件</p><ul><li>强制添加被忽略的文件到git<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">add</span> -f [<span class="hljs-built_in">file</span>] <br></code></pre></td></tr></table></figure></li><li><p>查看.gitignore是否是否规则有问题</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">git<span class="hljs-built_in"> check-ignore </span>-v [file]<br></code></pre></td></tr></table></figure><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3></li><li><p>针对用户</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> <span class="hljs-keyword">alias</span><span class="hljs-variable">.st</span> status<br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> <span class="hljs-keyword">alias</span><span class="hljs-variable">.co</span> checkout<br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> <span class="hljs-keyword">alias</span><span class="hljs-variable">.ci</span> commit<br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> <span class="hljs-keyword">alias</span><span class="hljs-variable">.br</span> branch<br></code></pre></td></tr></table></figure></li><li>针对仓库<br>在.git/config里面alias 里面配置</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Git是2005年Linus Torvalds 为了帮助管理 Linux(R) 内核开发而开发的一个开放源码的版本控制软件, 可以说是当今世</summary>
      
    
    
    
    <category term="常用技巧" scheme="http://example.com/categories/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>测试博客</title>
    <link href="http://example.com/2021/04/25/hello-world/"/>
    <id>http://example.com/2021/04/25/hello-world/</id>
    <published>2021-04-25T20:27:57.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客部署啦<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="本站">[1]</span></a></sup>, <strong>重要呀</strong></p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attribute">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span>  <span class="hljs-attribute">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><iframe src="https://hexo.fluid-dev.com/" width="100%" height="500" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><h3 id="mardown"><a href="#mardown" class="headerlink" title="mardown"></a>mardown</h3><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><br><span class="xml">文字 或者 `markdown` 均可</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><p class="note note-primary">标签</p><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><span class="label label-primary">Label</span></p><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">cb</span> text, checked?, incline? %&#125;</span><br></code></pre></td></tr></table></figure>            <input type="checkbox" disabled >默认选中          <h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;% btn url, <span class="hljs-keyword">text</span>, title %&#125;<br></code></pre></td></tr></table></figure><p><a class="btn" href="url" title="title">text</a></p><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less">&#123;% <span class="hljs-selector-tag">gi</span> <span class="hljs-selector-tag">total</span> <span class="hljs-selector-tag">n1-n2-</span>... %&#125;<br>  !<span class="hljs-selector-attr">[]</span>(url)<br>  !<span class="hljs-selector-attr">[]</span>(url)<br>  !<span class="hljs-selector-attr">[]</span>(url)<br>  !<span class="hljs-selector-attr">[]</span>(url)<br>  !<span class="hljs-selector-attr">[]</span>(url)<br>&#123;% <span class="hljs-selector-tag">endgi</span> %&#125;<br></code></pre></td></tr></table></figure><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/cover.webp" alt=""></div><div class="group-image-wrap"><img src="/img/cover.webp" alt=""></div><div class="group-image-wrap"><img src="/img/cover.webp" alt=""></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/cover.webp" alt=""></div><div class="group-image-wrap"><img src="/img/cover.webp" alt=""></div></div></div><h3 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;% if(!is_post()) &#123; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span><br>    &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;<br>    &lt;%- hitokoto %&gt;<br>    &lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitofrom&quot;</span>&gt;</span><br>    &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;<br>    &lt;%- hitofrom %&gt;<br>    &lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h3 id="mermaid流程图"><a href="#mermaid流程图" class="headerlink" title="mermaid流程图"></a>mermaid流程图</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ada">classDiagram<br>Class01 &lt;|<span class="hljs-comment">-- AveryLongClass : Cool</span><br>Class03 *<span class="hljs-comment">-- Class04</span><br>Class05 o<span class="hljs-comment">-- Class06</span><br>Class07 .. Class08<br>Class09 <span class="hljs-comment">--&gt; C2 : Where am i?</span><br>Class09 <span class="hljs-comment">--* C3</span><br>Class09 <span class="hljs-comment">--|&gt; Class07</span><br>Class07 : <span class="hljs-type">equals</span>()<br>Class07 : <span class="hljs-type">Object</span>[] elementData<br>Class01 : <span class="hljs-type">size</span>()<br>Class01 : <span class="hljs-type">int</span> chimp<br>Class01 : <span class="hljs-type">int</span> gorilla<br>Class08 &lt;<span class="hljs-comment">--&gt; C2: Cool label</span><br></code></pre></td></tr></table></figure><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><script type="math/tex; mode=display">E=mc^2</script><h2 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://hexblog.cn">本站</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的博客部署啦&lt;sup id=&quot;fnref:1&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;本站
&quot;&gt;[1]&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客转移成功啦!</title>
    <link href="http://example.com/2021/04/24/multi-platform-submmit/"/>
    <id>http://example.com/2021/04/24/multi-platform-submmit/</id>
    <published>2021-04-24T19:47:28.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<p>实现了源码提交到github,可以发markdown博客，通过github action构建静态网站托管到github/gitee/coding, 今天开始就可以快快乐乐下博客啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实现了源码提交到github,可以发markdown博客，通过github action构建静态网站托管到github/gitee/coding, 今天开始就可以快快乐乐下博客啦！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux的前世今生</title>
    <link href="http://example.com/2019/03/24/birth-of-linux/"/>
    <id>http://example.com/2019/03/24/birth-of-linux/</id>
    <published>2019-03-24T16:27:42.000Z</published>
    <updated>2021-05-18T00:38:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>操作系统Operating System，简称OS，港台译作「作业系统」,是管理计算机硬件与软件资源的程序，同时也是计算机系统的核心与基石。<br>日常我们用到的如:</p><p><img src="http://cdn.hexblog.cn/20190527-001.png"/><br> <center>微软win10系统</center></p><p><img src="http://cdn.hexblog.cn/20190527-002.jpg"/><br> <center>苹果mac的IOS系统</center></p><p><img src="http://cdn.hexblog.cn/20190527-003.png"/><br>   <center>谷歌的Android系统</center></p><p>这些操作系统提供了，在其上运行的程序提高基本环境，当大家使用 Google 搜索时，使用微博热搜时，使用taobao购物时，使用微信聊天时，很多人并不知道，支撑这些软件和服务的，是后台成千上万台 Linux服务器，它们时时刻刻都在进行着忙碌的运算和数据处理，确保数据信息在人、软件和硬件之间安全的流淌。可以这么说，世界上大部分软件和服务都运行在 Linux 操作系统之上，神马云计算、大数据、移动互联网，说起来风起云涌，其实没有Linux全得歇菜（微软除外）。</p><h2 id="梦回贝尔实验室"><a href="#梦回贝尔实验室" class="headerlink" title="梦回贝尔实验室"></a>梦回贝尔实验室</h2><p>1965年之前的时候，电脑并不像现在如此烂大街，可不是一般人能碰的起的，除非是军事或者学院的研究机构，而且当时大型主机至多能提供30台终端（30个键盘、显示器)，连接一台电脑，它的使用和维护成本非常之高。<br>为了解决数量不够用的问题，1965年前后由贝尔实验室、麻省理工学院以及 通用电气共同发起了Multics项目，想让大型主机支持300台终端，1969年前后这个项目进度缓慢，资金短缺，贝尔实验室觉得没钱干不下去了，退出了研究。</p><p><img src="http://cdn.hexblog.cn/20190527-004.png"/><br> <center>Ken Thompson（左）Dennis Ritchie（右）</center></p><p>当时贝尔实验室中有个叫肯-汤姆逊（Ken Thompson）的人，闲着自己倒腾游戏，编写“星际旅行”(Space Travel)，为了能够上班在一台空闲电脑上玩，就用汇编开发了一个简单的操作系统，这个就是后来的Unix。所你你想想当你上班去干一件件事情的时候，往往结果还不如意，但是凭着兴趣随性往往收获意想不到。如果你关注这个肯-汤姆逊，你会知道他很有名，他除了创造了一个B语言（就是C语言的前身），而且他是plan9操作系统的创造者和开发者之一，2006年汤姆逊进入谷歌，2007年开始和其他几位工程师共同设计的Go语言，另外参加过正则表达式和UTF-8编码的设计，而这些事情凡人做一件也足以载入史册。另外一个很有意思的事情，就是在1969年操作系统Unix诞生的时候，林纳斯-托瓦兹（（Linus Benedict Torvalds））在芬兰呱呱落地。</p><p><img src="http://cdn.hexblog.cn/20190527-005.jpg"/><br> <center>Linus Benedict Torvalds</center></p><p>到了1972年的时候，肯-汤姆逊和丹尼-里奇（Dennis Ritchie），用汇编语言去做移植，实在是太苦逼了，两基友在电脑面前互相骂娘。而B语言可以被认为是那个时代的解释型语言，不能直接生成机器码，跨平台性差，难堪大任，为了能够在其他的电脑上也能够运行这个非常棒的Unix操作系统，他们想用高级语言来完成这个第三版，丹尼斯-里奇在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。从此一代语言巨星冉冉升起，40年后依然排在兵器排名榜第一位，怎一个牛字了得！<br>到1973年初，哥俩成功地用C语言，重写了第三版内核，这个时候操作系统修改移植就变得相当的便利，为其普及打下非常坚实基础，Unix 与 C 从此珠联璧合，长相思守，再也无法分离，很快的成为世界的主导，最开始是学术界和大学是其的主要使用者，比如做一些教学，从那个时候逐渐流行起来。<br><img src="http://cdn.hexblog.cn/20190527-006.jpg"/></p><center>Andrew S. Tanenbaum</center><h2 id="Unix纷争四起"><a href="#Unix纷争四起" class="headerlink" title="Unix纷争四起"></a>Unix纷争四起</h2><p>只不过开始也有了一些法律纠纷，主要是那个AT&amp;T(通用电气)，它企图私有化UNIX,让很多软件开发者很痛心和焦虑。塔能鲍姆(Andrew S. Tanenbaum)教授为了能在课堂上教授学生操作系统运作的实务细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统，以避免版权上的争议。他以小型UNIX（mini-Unix）之意，将它称为Minix。</p><p><img src="http://cdn.hexblog.cn/20190527-007.png"/></p><center>Richard Matthew Stallman</center><h2 id="伟大的布道者"><a href="#伟大的布道者" class="headerlink" title="伟大的布道者"></a>伟大的布道者</h2><p>同时理查德-斯托曼（Richard Matthew Stallman）出现了。</p><p>搞IT的都知道，这位活着的传奇，自由软件运动的布道者，上图：络腮满面，泡面长发配圆顶礼帽，大肚配罩衫，无一处不荒诞，却也无一处不可爱，正如这位大师级顽童的程序生涯般耐人寻味。</p><p>理查德-斯托曼认为Unix可能是好的操作系统，如果大家能够将所学进行贡献出来，那么这个系统将会更加的优异，他倡导开源，在80年代的大环境下，他要实现一个，自由的，类Unix的操作系统，他这个想法也得到了很多人的认同，并且有一些捐助者支持他这个理想。理查德-斯托曼在1983年创立了这个GNU（GNU’s Not Unix!的递归缩写）项目，计划开发一套与UNIX相互兼容的操作系统，在1985年10月份，他又创立了这个自由软件基金会(Free Software Foundation)，为GNU提供一些法律和一些财务上面的支持，接着他开发了GCC、GDB、GNU Emacs，同时编写了GNU通用公共许可协议（GNU General Public License即GPL），但是由于很多原因，GNU自己的操作系统迟迟没有完成开发。</p><p><img src="http://cdn.hexblog.cn/20190527-008.png"/></p><p>那这个内核他有多重要呢？</p><p>首先它是一个系统级别的软件，它是用来管理在其上运行的软件发出的数据IO的输入和输出请求。将这些请求会转译成一个数据处理的指令，交由CPU也就是中央处理器和电脑中其他的电子组件进行处理，是现在操作系统中非常基本的一个部分。Linux许多人都使用它，但它仅仅是你所用这个系统中的一部分，是一个内核，它为运行的其他的程序分配计算机的资源，是很基础的部分，只能在完整的操作系统框架下才能发挥作用，通常Linux就和GNU作系统是一起使用的，而整个系统就是GNU和Linux，所以有时候你能看到名字叫GUN/Linux，所有Linux的发行版，实际上是GUN/Linux的发行版。</p><h2 id="linux之父-林纳斯"><a href="#linux之父-林纳斯" class="headerlink" title="linux之父-林纳斯"></a>linux之父-林纳斯</h2><p>林纳斯的外公是赫尔辛基大学的一位统计学教授，数学家。他有一台Commodore VIC-20计算机，爷子年老眼花，也不愿意打字，外孙小的时候就把林纳斯纳斯放在腿上，让他帮助录入写在纸片上的程序。这种很有场面感的场景一再出现后，李纳斯除了对数学有了初步的认识，同时也把计算机玩的娴熟，10岁的时候，很快他就在外公的指导下开始编写自己的程序。</p><p>我们10岁在干什么，打沙包么？小霸王么？让20多岁才开始编程的同学一入世就差别人十年的身位，除了冷冷的绝望，你还能感受到什么？</p><p><img src="http://cdn.hexblog.cn/20190527-009.png"/></p><center>Linus Benedict Torvalds</center><p>林纳斯在1989年服了11个月芬兰国家义务兵役期间，就购买了塔能鲍姆所著的教科书《操作系统：设计及实现》及Minix源代码，开始研究操作系统。在他的自传《Just For Fun》中，托瓦兹把这本书描述为“引领我到达新高度的一本书籍”。</p><p>1990年，而林纳斯此时在外公所在的赫尔辛基大学上学，他最初是用汇编语言写了一个英特尔30386CPU处理多任务切换的一个程序。而塔能鲍姆的操作系统Minix由于其用于教学，他不愿意做更多的功能的更新，比如性能问题、内核问题、文件系统问题和终端仿真器等诸多问题，导致一堆工程师和学生在这个作业系统功能上面吐槽满满。林纳斯想既然如此，那我何不自己来改写一个我想要的作业系统？于是基于Minix的灵感，他开始写一些硬件的设备的驱动程序，还有一个很小的文件系统，这样0.01版本的就出来了。但是它只是具有个操作系统内核勉强的雏形。但又不能运行，因为他必须要在有Minix的机器上编译之后才能用，那个时候也没有现在的网络条件，常见的就是一个新闻组，所以他在新闻组里面发布了一个Linux早期版本的通告。</p><p>从一开始，林纳斯就决定自由扩散包括它的源代码。发布后随即Linux立刻引起了很多黑客们的注意，并且通过计算机互联网加入了linux内核开发。这时候林纳斯经完全着迷，不想听停止，决定踢开Minix。于是在1991年10 月5号发布Linux 0.0.2版本,在这个版本中已经可以运行bash 和gcc。由于一批高水平的黑客的加入，使得linux开发迅速蓬勃起来。几乎一两个礼拜就会有新的版本和修正版本出现，所以在93年底到94年初的时候，linux1.0诞生，这个时候linux已经是一个功能很完备的操作系统，而且写得非常的紧凑高效，可以充分发挥硬件的性能，在4m内存的80386的机器上面表现得非常好。</p><p>毫不吹嘘地说，他是一个非常伟大的架构师，并且他同时还有非常大的项目协调管理能力，从那时到现在他一直协调上千人的开发人员一起做linux开发工作，除此以外，他还发起了git，他是主要的开发者，造福千万码农。他性格鲜明，在网上邮件列表中也以火暴的脾气著称，因Nvidia一直没有针对Linux平台发布任何官方的Optimus支持，托瓦兹当众对着镜头竖起了中指，说 ‘So, Nvidia, fuck you!’，在他的领域里，无法容忍废话与缺陷，极致地完美主义者。 </p><p><img src="http://cdn.hexblog.cn/20190527-010.png"/></p><h2 id="GNU与Linux"><a href="#GNU与Linux" class="headerlink" title="GNU与Linux"></a>GNU与Linux</h2><p>Linux的历史是和GNU紧密联系在一起的。从1983年开始的GNU计划致力于开发一个自由并且完整的类Unix操作系统，包括软件开发工具和各种应用程序。到1991年 Linux 内核发布的时候，GNU已经几乎完成了除了系统内核之外的各种必备软件的开发。GNU实际上也同时在开发内核，不过他在开发过程中意识了有很多问题，正好是由于linux出现，1992年的时候，林纳斯在GPL v2协议下，发布了0.1.2版的内核，这个使得linux变成自由系统，它填补了GNU系统的一个重要的空白，linux用户在挑选软件方面有非常大的自由，比如说，你今后可以选择几十种不同的命运行外壳和多种的图形的桌面，这个其实Windows的用户感觉很不习惯，linux另外的特点，就是很少崩溃，适合同时间运行多个程序，而且比大部分的操作系统安全，如果你用过windows系统是做过服务器，你能理解Linux为什么是服务器市场上增长最快的操作系统。</p><p><img src="http://cdn.hexblog.cn/20190527-011.png"/></p><h2 id="大教堂与市集"><a href="#大教堂与市集" class="headerlink" title="大教堂与市集"></a>大教堂与市集</h2><p>讲一个小插曲，《大教堂与市集》，是埃里克•斯蒂芬•雷蒙（Eric Steven Raymond）所撰写的软件工程方法论，他是以linux这个核心开发过程以及作者自己主持开发的开源代码Fetchmail为讨论案例的，这个文章是1997年5月29号发表的，在1999年他出版成书，他主要讨论两种的，自由软件开发模式，第一种大教堂的模式源代码在软件发行后公开，软件每个版本开发过程中，都是有一个专属的团队所管控的，比如说，GNU Emacs就是。另外一种模式是即集市，代码在开发过程中，就在互联网上公开。供别人查看然后开发，这个是指林纳斯带领linux核心开发为例子，这么做的观点是让足够多的人看到源代码，让错误无所遁形，大教堂模式的软件开发者模式，会让编程排错的的时间大大的增加，因为只有少数的开发者可以参与新的工作。市集的模式正好相反。市集模式也影响了原来采用大教堂模式的GNU Emacs及GCC释放源码。现在看到的场景来说，市集这种设计模式已经无所不在。</p><p><img src="http://cdn.hexblog.cn/20190527-014.jpg"/></p><h2 id="BSD与Linux"><a href="#BSD与Linux" class="headerlink" title="BSD与Linux"></a>BSD与Linux</h2><p>最后讲一下BSD。除了GUN以外，还有一个独立进行工程，开发了一个，自由的类型UNINX的操作系统就是BSD，他由UC伯克利开发。在80年代BCD里它还不是自由的，但是他在90年代变成了自由软件，我们现在看到了这些自由的操作系统，如果不是GUN系统派生的，那就是BSD系统派生的，BSD的代码和GNN并不重合，BSD系统现在也使用一些GUN的程序，GUN系统使用了BSD程序是一样的，整体来看，属于独立开发的不同系统。BSD和GUN开发的协议是不一样的。但由于法律因素中，还有些诸多的其他的原因，没让BSD没像GUN流行起来，这么广泛的传播。BSD有很多的分支，比如主流的FreeBSD(最受欢迎的 BSD)、NetBSD(被设计运行在几乎任何架构上)、OpenBSD(为最大化的安全性设计的)。</p><p><img src="http://cdn.hexblog.cn/20190527-012.png"/><br>Darwin的是苹果在2000年开放源代码操作系统，在Darwin系统内核中就包括了一个BSD系统，与其他的 BSD 有点不同，虽然底层内核和其他的软件是开源代码(BSD 代码)，但操作系统的大部分是闭源的 Mac OS 代码)。苹果在 BSD 基础上开发了 Mac OS X 和 IOS，这样他们就不必写操作系统底层，就像谷歌在 Linux 基础上开发 android 系统一样。</p><p><img src="http://cdn.hexblog.cn/20190527-013.png"/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;操作系统Operating System，简称OS，港台译作「作业系统」,是管理计算机硬件与软件资源的程序，同时也是计算机系统的核心与基石。</summary>
      
    
    
    
    <category term="科普文章" scheme="http://example.com/categories/%E7%A7%91%E6%99%AE%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="历史" scheme="http://example.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
